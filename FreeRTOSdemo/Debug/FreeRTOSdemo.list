
FreeRTOSdemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004960  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004a20  08004a20  00005a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa0  08004aa0  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004aa0  08004aa0  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004aa0  08004aa0  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa0  08004aa0  00005aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004aa4  08004aa4  00005aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08004aa8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf4  20000014  08004abc  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c08  08004abc  00006c08  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001044f  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002753  00000000  00000000  0001648b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00018be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d20  00000000  00000000  00019ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000947b  00000000  00000000  0001a9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ba3  00000000  00000000  00023e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d0e  00000000  00000000  000379e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d86f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c1c  00000000  00000000  000d8738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000dc354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a08 	.word	0x08004a08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08004a08 	.word	0x08004a08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main_blinky>:
static QueueHandle_t xQueue = NULL;

/*-----------------------------------------------------------*/

void main_blinky( void )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af02      	add	r7, sp, #8
	/* Create the queue. */
	xQueue = xQueueCreate( mainQUEUE_LENGTH, sizeof( unsigned long ) );
 8000226:	2200      	movs	r2, #0
 8000228:	2104      	movs	r1, #4
 800022a:	2001      	movs	r0, #1
 800022c:	f002 fb0c 	bl	8002848 <xQueueGenericCreate>
 8000230:	0002      	movs	r2, r0
 8000232:	4b10      	ldr	r3, [pc, #64]	@ (8000274 <main_blinky+0x54>)
 8000234:	601a      	str	r2, [r3, #0]

	if( xQueue != NULL )
 8000236:	4b0f      	ldr	r3, [pc, #60]	@ (8000274 <main_blinky+0x54>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d017      	beq.n	800026e <main_blinky+0x4e>
	{
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvQueueReceiveTask,					/* The function that implements the task. */
 800023e:	490e      	ldr	r1, [pc, #56]	@ (8000278 <main_blinky+0x58>)
 8000240:	480e      	ldr	r0, [pc, #56]	@ (800027c <main_blinky+0x5c>)
 8000242:	2300      	movs	r3, #0
 8000244:	9301      	str	r3, [sp, #4]
 8000246:	2302      	movs	r3, #2
 8000248:	9300      	str	r3, [sp, #0]
 800024a:	2322      	movs	r3, #34	@ 0x22
 800024c:	223c      	movs	r2, #60	@ 0x3c
 800024e:	f002 fe98 	bl	8002f82 <xTaskCreate>
					configMINIMAL_STACK_SIZE, 				/* The size of the stack to allocate to the task. */
					( void * ) mainQUEUE_RECEIVE_PARAMETER, /* The parameter passed to the task - just to check the functionality. */
					mainQUEUE_RECEIVE_TASK_PRIORITY, 		/* The priority assigned to the task. */
					NULL );									/* The task handle is not required, so NULL is passed. */

		xTaskCreate( prvQueueSendTask, "TX", configMINIMAL_STACK_SIZE, ( void * ) mainQUEUE_SEND_PARAMETER, mainQUEUE_SEND_TASK_PRIORITY, NULL );
 8000252:	4a0b      	ldr	r2, [pc, #44]	@ (8000280 <main_blinky+0x60>)
 8000254:	490b      	ldr	r1, [pc, #44]	@ (8000284 <main_blinky+0x64>)
 8000256:	480c      	ldr	r0, [pc, #48]	@ (8000288 <main_blinky+0x68>)
 8000258:	2300      	movs	r3, #0
 800025a:	9301      	str	r3, [sp, #4]
 800025c:	2301      	movs	r3, #1
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	0013      	movs	r3, r2
 8000262:	223c      	movs	r2, #60	@ 0x3c
 8000264:	f002 fe8d 	bl	8002f82 <xTaskCreate>

		/* Start the tasks and timer running. */
		vTaskStartScheduler();
 8000268:	f003 f84a 	bl	8003300 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	for( ;; );
 800026c:	46c0      	nop			@ (mov r8, r8)
 800026e:	46c0      	nop			@ (mov r8, r8)
 8000270:	e7fd      	b.n	800026e <main_blinky+0x4e>
 8000272:	46c0      	nop			@ (mov r8, r8)
 8000274:	20000030 	.word	0x20000030
 8000278:	08004a20 	.word	0x08004a20
 800027c:	080002d9 	.word	0x080002d9
 8000280:	00001111 	.word	0x00001111
 8000284:	08004a24 	.word	0x08004a24
 8000288:	0800028d 	.word	0x0800028d

0800028c <prvQueueSendTask>:
}
/*-----------------------------------------------------------*/

static void prvQueueSendTask( void *pvParameters )
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
TickType_t xNextWakeTime;
const unsigned long ulValueToSend = 100UL;
 8000294:	2364      	movs	r3, #100	@ 0x64
 8000296:	60bb      	str	r3, [r7, #8]

	/* Check the task parameter is as expected. */
	configASSERT( ( ( unsigned long ) pvParameters ) == mainQUEUE_SEND_PARAMETER );
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4a0d      	ldr	r2, [pc, #52]	@ (80002d0 <prvQueueSendTask+0x44>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d002      	beq.n	80002a6 <prvQueueSendTask+0x1a>
 80002a0:	b672      	cpsid	i
 80002a2:	46c0      	nop			@ (mov r8, r8)
 80002a4:	e7fd      	b.n	80002a2 <prvQueueSendTask+0x16>

	/* Initialise xNextWakeTime - this only needs to be done once. */
	xNextWakeTime = xTaskGetTickCount();
 80002a6:	f003 f963 	bl	8003570 <xTaskGetTickCount>
 80002aa:	0003      	movs	r3, r0
 80002ac:	60fb      	str	r3, [r7, #12]
	{
		/* Place this task in the blocked state until it is time to run again.
		The block time is specified in ticks, the constant used converts ticks
		to ms.  While in the Blocked state this task will not consume any CPU
		time. */
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
 80002ae:	230c      	movs	r3, #12
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	21c8      	movs	r1, #200	@ 0xc8
 80002b4:	0018      	movs	r0, r3
 80002b6:	f002 ffc3 	bl	8003240 <xTaskDelayUntil>

		/* Send to the queue - causing the queue receive task to unblock and
		toggle the LED.  0 is used as the block time so the sending operation
		will not block - it shouldn't need to block as the queue should always
		be empty at this point in the code. */
		xQueueSend( xQueue, &ulValueToSend, 0U );
 80002ba:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <prvQueueSendTask+0x48>)
 80002bc:	6818      	ldr	r0, [r3, #0]
 80002be:	2308      	movs	r3, #8
 80002c0:	18f9      	adds	r1, r7, r3
 80002c2:	2300      	movs	r3, #0
 80002c4:	2200      	movs	r2, #0
 80002c6:	f002 fb45 	bl	8002954 <xQueueGenericSend>
		vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS );
 80002ca:	46c0      	nop			@ (mov r8, r8)
 80002cc:	e7ef      	b.n	80002ae <prvQueueSendTask+0x22>
 80002ce:	46c0      	nop			@ (mov r8, r8)
 80002d0:	00001111 	.word	0x00001111
 80002d4:	20000030 	.word	0x20000030

080002d8 <prvQueueReceiveTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvQueueReceiveTask( void *pvParameters )
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
unsigned long ulReceivedValue;

	/* Check the task parameter is as expected. */
	configASSERT( ( ( unsigned long ) pvParameters ) == mainQUEUE_RECEIVE_PARAMETER );
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b22      	cmp	r3, #34	@ 0x22
 80002e4:	d002      	beq.n	80002ec <prvQueueReceiveTask+0x14>
 80002e6:	b672      	cpsid	i
 80002e8:	46c0      	nop			@ (mov r8, r8)
 80002ea:	e7fd      	b.n	80002e8 <prvQueueReceiveTask+0x10>
	for( ;; )
	{
		/* Wait until something arrives in the queue - this task will block
		indefinitely provided INCLUDE_vTaskSuspend is set to 1 in
		FreeRTOSConfig.h. */
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
 80002ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000318 <prvQueueReceiveTask+0x40>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2201      	movs	r2, #1
 80002f2:	4252      	negs	r2, r2
 80002f4:	210c      	movs	r1, #12
 80002f6:	1879      	adds	r1, r7, r1
 80002f8:	0018      	movs	r0, r3
 80002fa:	f002 fbf3 	bl	8002ae4 <xQueueReceive>

		/*  To get here something must have been received from the queue, but
		is it the expected value?  If it is, toggle the LED. */
		if( ulReceivedValue == 100UL )
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	2b64      	cmp	r3, #100	@ 0x64
 8000302:	d1f3      	bne.n	80002ec <prvQueueReceiveTask+0x14>
		{


			ulReceivedValue = 0U;
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000308:	2390      	movs	r3, #144	@ 0x90
 800030a:	05db      	lsls	r3, r3, #23
 800030c:	2120      	movs	r1, #32
 800030e:	0018      	movs	r0, r3
 8000310:	f000 fcc7 	bl	8000ca2 <HAL_GPIO_TogglePin>
		xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
 8000314:	e7ea      	b.n	80002ec <prvQueueReceiveTask+0x14>
 8000316:	46c0      	nop			@ (mov r8, r8)
 8000318:	20000030 	.word	0x20000030

0800031c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000320:	f000 fa24 	bl	800076c <HAL_Init>
	SystemClock_Config();
 8000324:	f000 f80c 	bl	8000340 <SystemClock_Config>
	  MX_GPIO_Init();
 8000328:	f000 f8e4 	bl	80004f4 <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 800032c:	f000 f8b2 	bl	8000494 <MX_USART2_UART_Init>
	  MX_TIM3_Init();
 8000330:	f000 f85a 	bl	80003e8 <MX_TIM3_Init>

		/* The mainCREATE_SIMPLE_BLINKY_DEMO_ONLY setting is described at the top
		of this file. */
		#if mainCREATE_SIMPLE_BLINKY_DEMO_ONLY == 1
		{
			main_blinky();
 8000334:	f7ff ff74 	bl	8000220 <main_blinky>
		{
			main_full();
		}
		#endif

		return 0;
 8000338:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800033a:	0018      	movs	r0, r3
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b590      	push	{r4, r7, lr}
 8000342:	b099      	sub	sp, #100	@ 0x64
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	242c      	movs	r4, #44	@ 0x2c
 8000348:	193b      	adds	r3, r7, r4
 800034a:	0018      	movs	r0, r3
 800034c:	2334      	movs	r3, #52	@ 0x34
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f004 fb23 	bl	800499c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000356:	231c      	movs	r3, #28
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	0018      	movs	r0, r3
 800035c:	2310      	movs	r3, #16
 800035e:	001a      	movs	r2, r3
 8000360:	2100      	movs	r1, #0
 8000362:	f004 fb1b 	bl	800499c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	231c      	movs	r3, #28
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f004 fb14 	bl	800499c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000374:	193b      	adds	r3, r7, r4
 8000376:	2220      	movs	r2, #32
 8000378:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800037a:	193b      	adds	r3, r7, r4
 800037c:	2201      	movs	r2, #1
 800037e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000380:	193b      	adds	r3, r7, r4
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	193b      	adds	r3, r7, r4
 8000388:	0018      	movs	r0, r3
 800038a:	f000 fca5 	bl	8000cd8 <HAL_RCC_OscConfig>
 800038e:	1e03      	subs	r3, r0, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000392:	f000 f91e 	bl	80005d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	211c      	movs	r1, #28
 8000398:	187b      	adds	r3, r7, r1
 800039a:	2207      	movs	r2, #7
 800039c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2203      	movs	r2, #3
 80003a2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2101      	movs	r1, #1
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 f815 	bl	80013e4 <HAL_RCC_ClockConfig>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003be:	f000 f908 	bl	80005d2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003c2:	003b      	movs	r3, r7
 80003c4:	2202      	movs	r2, #2
 80003c6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003c8:	003b      	movs	r3, r7
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ce:	003b      	movs	r3, r7
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 f973 	bl	80016bc <HAL_RCCEx_PeriphCLKConfig>
 80003d6:	1e03      	subs	r3, r0, #0
 80003d8:	d001      	beq.n	80003de <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003da:	f000 f8fa 	bl	80005d2 <Error_Handler>
  }
}
 80003de:	46c0      	nop			@ (mov r8, r8)
 80003e0:	46bd      	mov	sp, r7
 80003e2:	b019      	add	sp, #100	@ 0x64
 80003e4:	bd90      	pop	{r4, r7, pc}
	...

080003e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	2308      	movs	r3, #8
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	0018      	movs	r0, r3
 80003f4:	2310      	movs	r3, #16
 80003f6:	001a      	movs	r2, r3
 80003f8:	2100      	movs	r1, #0
 80003fa:	f004 facf 	bl	800499c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fe:	003b      	movs	r3, r7
 8000400:	0018      	movs	r0, r3
 8000402:	2308      	movs	r3, #8
 8000404:	001a      	movs	r2, r3
 8000406:	2100      	movs	r1, #0
 8000408:	f004 fac8 	bl	800499c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800040c:	4b1e      	ldr	r3, [pc, #120]	@ (8000488 <MX_TIM3_Init+0xa0>)
 800040e:	4a1f      	ldr	r2, [pc, #124]	@ (800048c <MX_TIM3_Init+0xa4>)
 8000410:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000412:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <MX_TIM3_Init+0xa0>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000418:	4b1b      	ldr	r3, [pc, #108]	@ (8000488 <MX_TIM3_Init+0xa0>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800041e:	4b1a      	ldr	r3, [pc, #104]	@ (8000488 <MX_TIM3_Init+0xa0>)
 8000420:	4a1b      	ldr	r2, [pc, #108]	@ (8000490 <MX_TIM3_Init+0xa8>)
 8000422:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000424:	4b18      	ldr	r3, [pc, #96]	@ (8000488 <MX_TIM3_Init+0xa0>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042a:	4b17      	ldr	r3, [pc, #92]	@ (8000488 <MX_TIM3_Init+0xa0>)
 800042c:	2200      	movs	r2, #0
 800042e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000430:	4b15      	ldr	r3, [pc, #84]	@ (8000488 <MX_TIM3_Init+0xa0>)
 8000432:	0018      	movs	r0, r3
 8000434:	f001 fa40 	bl	80018b8 <HAL_TIM_Base_Init>
 8000438:	1e03      	subs	r3, r0, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800043c:	f000 f8c9 	bl	80005d2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000440:	2108      	movs	r1, #8
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2280      	movs	r2, #128	@ 0x80
 8000446:	0152      	lsls	r2, r2, #5
 8000448:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800044a:	187a      	adds	r2, r7, r1
 800044c:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <MX_TIM3_Init+0xa0>)
 800044e:	0011      	movs	r1, r2
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fa81 	bl	8001958 <HAL_TIM_ConfigClockSource>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800045a:	f000 f8ba 	bl	80005d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045e:	003b      	movs	r3, r7
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000464:	003b      	movs	r3, r7
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800046a:	003a      	movs	r2, r7
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_TIM3_Init+0xa0>)
 800046e:	0011      	movs	r1, r2
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fc6d 	bl	8001d50 <HAL_TIMEx_MasterConfigSynchronization>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800047a:	f000 f8aa 	bl	80005d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b006      	add	sp, #24
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	20000034 	.word	0x20000034
 800048c:	40000400 	.word	0x40000400
 8000490:	0000ffff 	.word	0x0000ffff

08000494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000498:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 800049a:	4a15      	ldr	r2, [pc, #84]	@ (80004f0 <MX_USART2_UART_Init+0x5c>)
 800049c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800049e:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 80004a0:	2296      	movs	r2, #150	@ 0x96
 80004a2:	0212      	lsls	r2, r2, #8
 80004a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b09      	ldr	r3, [pc, #36]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d6:	4b05      	ldr	r3, [pc, #20]	@ (80004ec <MX_USART2_UART_Init+0x58>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fc97 	bl	8001e0c <HAL_UART_Init>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004e2:	f000 f876 	bl	80005d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	2000007c 	.word	0x2000007c
 80004f0:	40004400 	.word	0x40004400

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b590      	push	{r4, r7, lr}
 80004f6:	b089      	sub	sp, #36	@ 0x24
 80004f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	240c      	movs	r4, #12
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	2314      	movs	r3, #20
 8000502:	001a      	movs	r2, r3
 8000504:	2100      	movs	r1, #0
 8000506:	f004 fa49 	bl	800499c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b2d      	ldr	r3, [pc, #180]	@ (80005c0 <MX_GPIO_Init+0xcc>)
 800050c:	695a      	ldr	r2, [r3, #20]
 800050e:	4b2c      	ldr	r3, [pc, #176]	@ (80005c0 <MX_GPIO_Init+0xcc>)
 8000510:	2180      	movs	r1, #128	@ 0x80
 8000512:	0309      	lsls	r1, r1, #12
 8000514:	430a      	orrs	r2, r1
 8000516:	615a      	str	r2, [r3, #20]
 8000518:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <MX_GPIO_Init+0xcc>)
 800051a:	695a      	ldr	r2, [r3, #20]
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	031b      	lsls	r3, r3, #12
 8000520:	4013      	ands	r3, r2
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000526:	4b26      	ldr	r3, [pc, #152]	@ (80005c0 <MX_GPIO_Init+0xcc>)
 8000528:	695a      	ldr	r2, [r3, #20]
 800052a:	4b25      	ldr	r3, [pc, #148]	@ (80005c0 <MX_GPIO_Init+0xcc>)
 800052c:	2180      	movs	r1, #128	@ 0x80
 800052e:	03c9      	lsls	r1, r1, #15
 8000530:	430a      	orrs	r2, r1
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b22      	ldr	r3, [pc, #136]	@ (80005c0 <MX_GPIO_Init+0xcc>)
 8000536:	695a      	ldr	r2, [r3, #20]
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	03db      	lsls	r3, r3, #15
 800053c:	4013      	ands	r3, r2
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000542:	4b1f      	ldr	r3, [pc, #124]	@ (80005c0 <MX_GPIO_Init+0xcc>)
 8000544:	695a      	ldr	r2, [r3, #20]
 8000546:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_GPIO_Init+0xcc>)
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	0289      	lsls	r1, r1, #10
 800054c:	430a      	orrs	r2, r1
 800054e:	615a      	str	r2, [r3, #20]
 8000550:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_GPIO_Init+0xcc>)
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	2380      	movs	r3, #128	@ 0x80
 8000556:	029b      	lsls	r3, r3, #10
 8000558:	4013      	ands	r3, r2
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055e:	2390      	movs	r3, #144	@ 0x90
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fb7e 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800056c:	193b      	adds	r3, r7, r4
 800056e:	2280      	movs	r2, #128	@ 0x80
 8000570:	0192      	lsls	r2, r2, #6
 8000572:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	2284      	movs	r2, #132	@ 0x84
 8000578:	0392      	lsls	r2, r2, #14
 800057a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000582:	193b      	adds	r3, r7, r4
 8000584:	4a0f      	ldr	r2, [pc, #60]	@ (80005c4 <MX_GPIO_Init+0xd0>)
 8000586:	0019      	movs	r1, r3
 8000588:	0010      	movs	r0, r2
 800058a:	f000 f9f5 	bl	8000978 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800058e:	0021      	movs	r1, r4
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2220      	movs	r2, #32
 8000594:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2201      	movs	r2, #1
 800059a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a8:	187a      	adds	r2, r7, r1
 80005aa:	2390      	movs	r3, #144	@ 0x90
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 f9e1 	bl	8000978 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b009      	add	sp, #36	@ 0x24
 80005bc:	bd90      	pop	{r4, r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	40021000 	.word	0x40021000
 80005c4:	48000800 	.word	0x48000800

080005c8 <vApplicationMallocFailedHook>:

/* USER CODE BEGIN 4 */


void vApplicationMallocFailedHook( void )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 80005cc:	b672      	cpsid	i
	for( ;; );
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	e7fd      	b.n	80005ce <vApplicationMallocFailedHook+0x6>

080005d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d6:	b672      	cpsid	i
}
 80005d8:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005da:	46c0      	nop			@ (mov r8, r8)
 80005dc:	e7fd      	b.n	80005da <Error_Handler+0x8>
	...

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <HAL_MspInit+0x44>)
 80005e8:	699a      	ldr	r2, [r3, #24]
 80005ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <HAL_MspInit+0x44>)
 80005ec:	2101      	movs	r1, #1
 80005ee:	430a      	orrs	r2, r1
 80005f0:	619a      	str	r2, [r3, #24]
 80005f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <HAL_MspInit+0x44>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	2201      	movs	r2, #1
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <HAL_MspInit+0x44>)
 8000600:	69da      	ldr	r2, [r3, #28]
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <HAL_MspInit+0x44>)
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	0549      	lsls	r1, r1, #21
 8000608:	430a      	orrs	r2, r1
 800060a:	61da      	str	r2, [r3, #28]
 800060c:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <HAL_MspInit+0x44>)
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	055b      	lsls	r3, r3, #21
 8000614:	4013      	ands	r3, r2
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b002      	add	sp, #8
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a09      	ldr	r2, [pc, #36]	@ (800065c <HAL_TIM_Base_MspInit+0x34>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d10b      	bne.n	8000652 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <HAL_TIM_Base_MspInit+0x38>)
 800063c:	69da      	ldr	r2, [r3, #28]
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <HAL_TIM_Base_MspInit+0x38>)
 8000640:	2102      	movs	r1, #2
 8000642:	430a      	orrs	r2, r1
 8000644:	61da      	str	r2, [r3, #28]
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <HAL_TIM_Base_MspInit+0x38>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	2202      	movs	r2, #2
 800064c:	4013      	ands	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b004      	add	sp, #16
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	40000400 	.word	0x40000400
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b08b      	sub	sp, #44	@ 0x2c
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	2414      	movs	r4, #20
 800066e:	193b      	adds	r3, r7, r4
 8000670:	0018      	movs	r0, r3
 8000672:	2314      	movs	r3, #20
 8000674:	001a      	movs	r2, r3
 8000676:	2100      	movs	r1, #0
 8000678:	f004 f990 	bl	800499c <memset>
  if(huart->Instance==USART2)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <HAL_UART_MspInit+0x90>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d132      	bne.n	80006ec <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000686:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 8000688:	69da      	ldr	r2, [r3, #28]
 800068a:	4b1b      	ldr	r3, [pc, #108]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 800068c:	2180      	movs	r1, #128	@ 0x80
 800068e:	0289      	lsls	r1, r1, #10
 8000690:	430a      	orrs	r2, r1
 8000692:	61da      	str	r2, [r3, #28]
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 8000696:	69da      	ldr	r2, [r3, #28]
 8000698:	2380      	movs	r3, #128	@ 0x80
 800069a:	029b      	lsls	r3, r3, #10
 800069c:	4013      	ands	r3, r2
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b15      	ldr	r3, [pc, #84]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 80006a8:	2180      	movs	r1, #128	@ 0x80
 80006aa:	0289      	lsls	r1, r1, #10
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <HAL_UART_MspInit+0x94>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	@ 0x80
 80006b6:	029b      	lsls	r3, r3, #10
 80006b8:	4013      	ands	r3, r2
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006be:	0021      	movs	r1, r4
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	220c      	movs	r2, #12
 80006c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2202      	movs	r2, #2
 80006ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2201      	movs	r2, #1
 80006dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	187a      	adds	r2, r7, r1
 80006e0:	2390      	movs	r3, #144	@ 0x90
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f946 	bl	8000978 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b00b      	add	sp, #44	@ 0x2c
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	40004400 	.word	0x40004400
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000700:	46c0      	nop			@ (mov r8, r8)
 8000702:	e7fd      	b.n	8000700 <NMI_Handler+0x4>

08000704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	e7fd      	b.n	8000708 <HardFault_Handler+0x4>

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000710:	46c0      	nop			@ (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000718:	480d      	ldr	r0, [pc, #52]	@ (8000750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800071c:	f7ff fff6 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000720:	480c      	ldr	r0, [pc, #48]	@ (8000754 <LoopForever+0x6>)
  ldr r1, =_edata
 8000722:	490d      	ldr	r1, [pc, #52]	@ (8000758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000724:	4a0d      	ldr	r2, [pc, #52]	@ (800075c <LoopForever+0xe>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000728:	e002      	b.n	8000730 <LoopCopyDataInit>

0800072a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800072c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072e:	3304      	adds	r3, #4

08000730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000734:	d3f9      	bcc.n	800072a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000736:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000738:	4c0a      	ldr	r4, [pc, #40]	@ (8000764 <LoopForever+0x16>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800073c:	e001      	b.n	8000742 <LoopFillZerobss>

0800073e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000740:	3204      	adds	r2, #4

08000742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000744:	d3fb      	bcc.n	800073e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000746:	f004 f931 	bl	80049ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074a:	f7ff fde7 	bl	800031c <main>

0800074e <LoopForever>:

LoopForever:
    b LoopForever
 800074e:	e7fe      	b.n	800074e <LoopForever>
  ldr   r0, =_estack
 8000750:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800075c:	08004aa8 	.word	0x08004aa8
  ldr r2, =_sbss
 8000760:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000764:	20001c08 	.word	0x20001c08

08000768 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_COMP_IRQHandler>
	...

0800076c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <HAL_Init+0x24>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <HAL_Init+0x24>)
 8000776:	2110      	movs	r1, #16
 8000778:	430a      	orrs	r2, r1
 800077a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800077c:	2000      	movs	r0, #0
 800077e:	f000 f809 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000782:	f7ff ff2d 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
}
 8000788:	0018      	movs	r0, r3
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <HAL_InitTick+0x5c>)
 800079e:	681c      	ldr	r4, [r3, #0]
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <HAL_InitTick+0x60>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	0019      	movs	r1, r3
 80007a6:	23fa      	movs	r3, #250	@ 0xfa
 80007a8:	0098      	lsls	r0, r3, #2
 80007aa:	f7ff fcad 	bl	8000108 <__udivsi3>
 80007ae:	0003      	movs	r3, r0
 80007b0:	0019      	movs	r1, r3
 80007b2:	0020      	movs	r0, r4
 80007b4:	f7ff fca8 	bl	8000108 <__udivsi3>
 80007b8:	0003      	movs	r3, r0
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 f8cf 	bl	800095e <HAL_SYSTICK_Config>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e00f      	b.n	80007e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d80b      	bhi.n	80007e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ce:	6879      	ldr	r1, [r7, #4]
 80007d0:	2301      	movs	r3, #1
 80007d2:	425b      	negs	r3, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 f8ac 	bl	8000934 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_InitTick+0x64>)
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	e000      	b.n	80007e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
}
 80007e8:	0018      	movs	r0, r3
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b003      	add	sp, #12
 80007ee:	bd90      	pop	{r4, r7, pc}
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000004 	.word	0x20000004

080007fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b02      	ldr	r3, [pc, #8]	@ (800080c <HAL_GetTick+0x10>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	20000104 	.word	0x20000104

08000810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	0002      	movs	r2, r0
 8000818:	6039      	str	r1, [r7, #0]
 800081a:	1dfb      	adds	r3, r7, #7
 800081c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800081e:	1dfb      	adds	r3, r7, #7
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b7f      	cmp	r3, #127	@ 0x7f
 8000824:	d828      	bhi.n	8000878 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000826:	4a2f      	ldr	r2, [pc, #188]	@ (80008e4 <__NVIC_SetPriority+0xd4>)
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	b25b      	sxtb	r3, r3
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	33c0      	adds	r3, #192	@ 0xc0
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	589b      	ldr	r3, [r3, r2]
 8000836:	1dfa      	adds	r2, r7, #7
 8000838:	7812      	ldrb	r2, [r2, #0]
 800083a:	0011      	movs	r1, r2
 800083c:	2203      	movs	r2, #3
 800083e:	400a      	ands	r2, r1
 8000840:	00d2      	lsls	r2, r2, #3
 8000842:	21ff      	movs	r1, #255	@ 0xff
 8000844:	4091      	lsls	r1, r2
 8000846:	000a      	movs	r2, r1
 8000848:	43d2      	mvns	r2, r2
 800084a:	401a      	ands	r2, r3
 800084c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	019b      	lsls	r3, r3, #6
 8000852:	22ff      	movs	r2, #255	@ 0xff
 8000854:	401a      	ands	r2, r3
 8000856:	1dfb      	adds	r3, r7, #7
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	0018      	movs	r0, r3
 800085c:	2303      	movs	r3, #3
 800085e:	4003      	ands	r3, r0
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000864:	481f      	ldr	r0, [pc, #124]	@ (80008e4 <__NVIC_SetPriority+0xd4>)
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b25b      	sxtb	r3, r3
 800086c:	089b      	lsrs	r3, r3, #2
 800086e:	430a      	orrs	r2, r1
 8000870:	33c0      	adds	r3, #192	@ 0xc0
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000876:	e031      	b.n	80008dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000878:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <__NVIC_SetPriority+0xd8>)
 800087a:	1dfb      	adds	r3, r7, #7
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	0019      	movs	r1, r3
 8000880:	230f      	movs	r3, #15
 8000882:	400b      	ands	r3, r1
 8000884:	3b08      	subs	r3, #8
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	3306      	adds	r3, #6
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	3304      	adds	r3, #4
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	1dfa      	adds	r2, r7, #7
 8000894:	7812      	ldrb	r2, [r2, #0]
 8000896:	0011      	movs	r1, r2
 8000898:	2203      	movs	r2, #3
 800089a:	400a      	ands	r2, r1
 800089c:	00d2      	lsls	r2, r2, #3
 800089e:	21ff      	movs	r1, #255	@ 0xff
 80008a0:	4091      	lsls	r1, r2
 80008a2:	000a      	movs	r2, r1
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	401a      	ands	r2, r3
 80008a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	019b      	lsls	r3, r3, #6
 80008ae:	22ff      	movs	r2, #255	@ 0xff
 80008b0:	401a      	ands	r2, r3
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	0018      	movs	r0, r3
 80008b8:	2303      	movs	r3, #3
 80008ba:	4003      	ands	r3, r0
 80008bc:	00db      	lsls	r3, r3, #3
 80008be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	4809      	ldr	r0, [pc, #36]	@ (80008e8 <__NVIC_SetPriority+0xd8>)
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	001c      	movs	r4, r3
 80008c8:	230f      	movs	r3, #15
 80008ca:	4023      	ands	r3, r4
 80008cc:	3b08      	subs	r3, #8
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	430a      	orrs	r2, r1
 80008d2:	3306      	adds	r3, #6
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	18c3      	adds	r3, r0, r3
 80008d8:	3304      	adds	r3, #4
 80008da:	601a      	str	r2, [r3, #0]
}
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	46bd      	mov	sp, r7
 80008e0:	b003      	add	sp, #12
 80008e2:	bd90      	pop	{r4, r7, pc}
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	2380      	movs	r3, #128	@ 0x80
 80008fa:	045b      	lsls	r3, r3, #17
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d301      	bcc.n	8000904 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000900:	2301      	movs	r3, #1
 8000902:	e010      	b.n	8000926 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <SysTick_Config+0x44>)
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	3a01      	subs	r2, #1
 800090a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090c:	2301      	movs	r3, #1
 800090e:	425b      	negs	r3, r3
 8000910:	2103      	movs	r1, #3
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff ff7c 	bl	8000810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <SysTick_Config+0x44>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <SysTick_Config+0x44>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	0018      	movs	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
 800093e:	210f      	movs	r1, #15
 8000940:	187b      	adds	r3, r7, r1
 8000942:	1c02      	adds	r2, r0, #0
 8000944:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	187b      	adds	r3, r7, r1
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b25b      	sxtb	r3, r3
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff ff5d 	bl	8000810 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b004      	add	sp, #16
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff ffbf 	bl	80008ec <SysTick_Config>
 800096e:	0003      	movs	r3, r0
}
 8000970:	0018      	movs	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	b002      	add	sp, #8
 8000976:	bd80      	pop	{r7, pc}

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000986:	e155      	b.n	8000c34 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2101      	movs	r1, #1
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	4091      	lsls	r1, r2
 8000992:	000a      	movs	r2, r1
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d100      	bne.n	80009a0 <HAL_GPIO_Init+0x28>
 800099e:	e146      	b.n	8000c2e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2203      	movs	r2, #3
 80009a6:	4013      	ands	r3, r2
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d005      	beq.n	80009b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	2203      	movs	r2, #3
 80009b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d130      	bne.n	8000a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	2203      	movs	r2, #3
 80009c4:	409a      	lsls	r2, r3
 80009c6:	0013      	movs	r3, r2
 80009c8:	43da      	mvns	r2, r3
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	68da      	ldr	r2, [r3, #12]
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	409a      	lsls	r2, r3
 80009da:	0013      	movs	r3, r2
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4313      	orrs	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ee:	2201      	movs	r2, #1
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	409a      	lsls	r2, r3
 80009f4:	0013      	movs	r3, r2
 80009f6:	43da      	mvns	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	091b      	lsrs	r3, r3, #4
 8000a04:	2201      	movs	r2, #1
 8000a06:	401a      	ands	r2, r3
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	2203      	movs	r2, #3
 8000a20:	4013      	ands	r3, r2
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d017      	beq.n	8000a56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	2203      	movs	r2, #3
 8000a32:	409a      	lsls	r2, r3
 8000a34:	0013      	movs	r3, r2
 8000a36:	43da      	mvns	r2, r3
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	409a      	lsls	r2, r3
 8000a48:	0013      	movs	r3, r2
 8000a4a:	693a      	ldr	r2, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d123      	bne.n	8000aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	08da      	lsrs	r2, r3, #3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3208      	adds	r2, #8
 8000a6a:	0092      	lsls	r2, r2, #2
 8000a6c:	58d3      	ldr	r3, [r2, r3]
 8000a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	2207      	movs	r2, #7
 8000a74:	4013      	ands	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	220f      	movs	r2, #15
 8000a7a:	409a      	lsls	r2, r3
 8000a7c:	0013      	movs	r3, r2
 8000a7e:	43da      	mvns	r2, r3
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	691a      	ldr	r2, [r3, #16]
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	2107      	movs	r1, #7
 8000a8e:	400b      	ands	r3, r1
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	409a      	lsls	r2, r3
 8000a94:	0013      	movs	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	08da      	lsrs	r2, r3, #3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3208      	adds	r2, #8
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	6939      	ldr	r1, [r7, #16]
 8000aa8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	43da      	mvns	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	401a      	ands	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685a      	ldr	r2, [r3, #4]
 8000ae2:	23c0      	movs	r3, #192	@ 0xc0
 8000ae4:	029b      	lsls	r3, r3, #10
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	d100      	bne.n	8000aec <HAL_GPIO_Init+0x174>
 8000aea:	e0a0      	b.n	8000c2e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aec:	4b57      	ldr	r3, [pc, #348]	@ (8000c4c <HAL_GPIO_Init+0x2d4>)
 8000aee:	699a      	ldr	r2, [r3, #24]
 8000af0:	4b56      	ldr	r3, [pc, #344]	@ (8000c4c <HAL_GPIO_Init+0x2d4>)
 8000af2:	2101      	movs	r1, #1
 8000af4:	430a      	orrs	r2, r1
 8000af6:	619a      	str	r2, [r3, #24]
 8000af8:	4b54      	ldr	r3, [pc, #336]	@ (8000c4c <HAL_GPIO_Init+0x2d4>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	2201      	movs	r2, #1
 8000afe:	4013      	ands	r3, r2
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b04:	4a52      	ldr	r2, [pc, #328]	@ (8000c50 <HAL_GPIO_Init+0x2d8>)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	589b      	ldr	r3, [r3, r2]
 8000b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	2203      	movs	r2, #3
 8000b16:	4013      	ands	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	220f      	movs	r2, #15
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	0013      	movs	r3, r2
 8000b20:	43da      	mvns	r2, r3
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	2390      	movs	r3, #144	@ 0x90
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d019      	beq.n	8000b66 <HAL_GPIO_Init+0x1ee>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a47      	ldr	r2, [pc, #284]	@ (8000c54 <HAL_GPIO_Init+0x2dc>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d013      	beq.n	8000b62 <HAL_GPIO_Init+0x1ea>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a46      	ldr	r2, [pc, #280]	@ (8000c58 <HAL_GPIO_Init+0x2e0>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d00d      	beq.n	8000b5e <HAL_GPIO_Init+0x1e6>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a45      	ldr	r2, [pc, #276]	@ (8000c5c <HAL_GPIO_Init+0x2e4>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d007      	beq.n	8000b5a <HAL_GPIO_Init+0x1e2>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a44      	ldr	r2, [pc, #272]	@ (8000c60 <HAL_GPIO_Init+0x2e8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d101      	bne.n	8000b56 <HAL_GPIO_Init+0x1de>
 8000b52:	2304      	movs	r3, #4
 8000b54:	e008      	b.n	8000b68 <HAL_GPIO_Init+0x1f0>
 8000b56:	2305      	movs	r3, #5
 8000b58:	e006      	b.n	8000b68 <HAL_GPIO_Init+0x1f0>
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e004      	b.n	8000b68 <HAL_GPIO_Init+0x1f0>
 8000b5e:	2302      	movs	r3, #2
 8000b60:	e002      	b.n	8000b68 <HAL_GPIO_Init+0x1f0>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <HAL_GPIO_Init+0x1f0>
 8000b66:	2300      	movs	r3, #0
 8000b68:	697a      	ldr	r2, [r7, #20]
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	0092      	lsls	r2, r2, #2
 8000b70:	4093      	lsls	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b78:	4935      	ldr	r1, [pc, #212]	@ (8000c50 <HAL_GPIO_Init+0x2d8>)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	3302      	adds	r3, #2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b86:	4b37      	ldr	r3, [pc, #220]	@ (8000c64 <HAL_GPIO_Init+0x2ec>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	2380      	movs	r3, #128	@ 0x80
 8000b9c:	035b      	lsls	r3, r3, #13
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000baa:	4b2e      	ldr	r3, [pc, #184]	@ (8000c64 <HAL_GPIO_Init+0x2ec>)
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <HAL_GPIO_Init+0x2ec>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43da      	mvns	r2, r3
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	2380      	movs	r3, #128	@ 0x80
 8000bc6:	039b      	lsls	r3, r3, #14
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bd4:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <HAL_GPIO_Init+0x2ec>)
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000bda:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <HAL_GPIO_Init+0x2ec>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	43da      	mvns	r2, r3
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	2380      	movs	r3, #128	@ 0x80
 8000bf0:	029b      	lsls	r3, r3, #10
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <HAL_GPIO_Init+0x2ec>)
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <HAL_GPIO_Init+0x2ec>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43da      	mvns	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	2380      	movs	r3, #128	@ 0x80
 8000c1a:	025b      	lsls	r3, r3, #9
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	d003      	beq.n	8000c28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_GPIO_Init+0x2ec>)
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	40da      	lsrs	r2, r3
 8000c3c:	1e13      	subs	r3, r2, #0
 8000c3e:	d000      	beq.n	8000c42 <HAL_GPIO_Init+0x2ca>
 8000c40:	e6a2      	b.n	8000988 <HAL_GPIO_Init+0x10>
  } 
}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	46c0      	nop			@ (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b006      	add	sp, #24
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000
 8000c54:	48000400 	.word	0x48000400
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	48000c00 	.word	0x48000c00
 8000c60:	48001000 	.word	0x48001000
 8000c64:	40010400 	.word	0x40010400

08000c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	0008      	movs	r0, r1
 8000c72:	0011      	movs	r1, r2
 8000c74:	1cbb      	adds	r3, r7, #2
 8000c76:	1c02      	adds	r2, r0, #0
 8000c78:	801a      	strh	r2, [r3, #0]
 8000c7a:	1c7b      	adds	r3, r7, #1
 8000c7c:	1c0a      	adds	r2, r1, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c80:	1c7b      	adds	r3, r7, #1
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d004      	beq.n	8000c92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c88:	1cbb      	adds	r3, r7, #2
 8000c8a:	881a      	ldrh	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c90:	e003      	b.n	8000c9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c92:	1cbb      	adds	r3, r7, #2
 8000c94:	881a      	ldrh	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b084      	sub	sp, #16
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	000a      	movs	r2, r1
 8000cac:	1cbb      	adds	r3, r7, #2
 8000cae:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cb6:	1cbb      	adds	r3, r7, #2
 8000cb8:	881b      	ldrh	r3, [r3, #0]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	041a      	lsls	r2, r3, #16
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	1cb9      	adds	r1, r7, #2
 8000cc6:	8809      	ldrh	r1, [r1, #0]
 8000cc8:	400b      	ands	r3, r1
 8000cca:	431a      	orrs	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	619a      	str	r2, [r3, #24]
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b004      	add	sp, #16
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f000 fb76 	bl	80013d8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	d100      	bne.n	8000cf8 <HAL_RCC_OscConfig+0x20>
 8000cf6:	e08e      	b.n	8000e16 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cf8:	4bc5      	ldr	r3, [pc, #788]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	220c      	movs	r2, #12
 8000cfe:	4013      	ands	r3, r2
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d00e      	beq.n	8000d22 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d04:	4bc2      	ldr	r3, [pc, #776]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	220c      	movs	r2, #12
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d117      	bne.n	8000d40 <HAL_RCC_OscConfig+0x68>
 8000d10:	4bbf      	ldr	r3, [pc, #764]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	23c0      	movs	r3, #192	@ 0xc0
 8000d16:	025b      	lsls	r3, r3, #9
 8000d18:	401a      	ands	r2, r3
 8000d1a:	2380      	movs	r3, #128	@ 0x80
 8000d1c:	025b      	lsls	r3, r3, #9
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d10e      	bne.n	8000d40 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d22:	4bbb      	ldr	r3, [pc, #748]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	2380      	movs	r3, #128	@ 0x80
 8000d28:	029b      	lsls	r3, r3, #10
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d100      	bne.n	8000d30 <HAL_RCC_OscConfig+0x58>
 8000d2e:	e071      	b.n	8000e14 <HAL_RCC_OscConfig+0x13c>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d000      	beq.n	8000d3a <HAL_RCC_OscConfig+0x62>
 8000d38:	e06c      	b.n	8000e14 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f000 fb4c 	bl	80013d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d107      	bne.n	8000d58 <HAL_RCC_OscConfig+0x80>
 8000d48:	4bb1      	ldr	r3, [pc, #708]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4bb0      	ldr	r3, [pc, #704]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d4e:	2180      	movs	r1, #128	@ 0x80
 8000d50:	0249      	lsls	r1, r1, #9
 8000d52:	430a      	orrs	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e02f      	b.n	8000db8 <HAL_RCC_OscConfig+0xe0>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10c      	bne.n	8000d7a <HAL_RCC_OscConfig+0xa2>
 8000d60:	4bab      	ldr	r3, [pc, #684]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4baa      	ldr	r3, [pc, #680]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d66:	49ab      	ldr	r1, [pc, #684]	@ (8001014 <HAL_RCC_OscConfig+0x33c>)
 8000d68:	400a      	ands	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	4ba8      	ldr	r3, [pc, #672]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4ba7      	ldr	r3, [pc, #668]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d72:	49a9      	ldr	r1, [pc, #676]	@ (8001018 <HAL_RCC_OscConfig+0x340>)
 8000d74:	400a      	ands	r2, r1
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	e01e      	b.n	8000db8 <HAL_RCC_OscConfig+0xe0>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b05      	cmp	r3, #5
 8000d80:	d10e      	bne.n	8000da0 <HAL_RCC_OscConfig+0xc8>
 8000d82:	4ba3      	ldr	r3, [pc, #652]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4ba2      	ldr	r3, [pc, #648]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d88:	2180      	movs	r1, #128	@ 0x80
 8000d8a:	02c9      	lsls	r1, r1, #11
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	4b9f      	ldr	r3, [pc, #636]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b9e      	ldr	r3, [pc, #632]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000d96:	2180      	movs	r1, #128	@ 0x80
 8000d98:	0249      	lsls	r1, r1, #9
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	e00b      	b.n	8000db8 <HAL_RCC_OscConfig+0xe0>
 8000da0:	4b9b      	ldr	r3, [pc, #620]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b9a      	ldr	r3, [pc, #616]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000da6:	499b      	ldr	r1, [pc, #620]	@ (8001014 <HAL_RCC_OscConfig+0x33c>)
 8000da8:	400a      	ands	r2, r1
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	4b98      	ldr	r3, [pc, #608]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b97      	ldr	r3, [pc, #604]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000db2:	4999      	ldr	r1, [pc, #612]	@ (8001018 <HAL_RCC_OscConfig+0x340>)
 8000db4:	400a      	ands	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d014      	beq.n	8000dea <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fd1c 	bl	80007fc <HAL_GetTick>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000dca:	f7ff fd17 	bl	80007fc <HAL_GetTick>
 8000dce:	0002      	movs	r2, r0
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b64      	cmp	r3, #100	@ 0x64
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e2fd      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ddc:	4b8c      	ldr	r3, [pc, #560]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2380      	movs	r3, #128	@ 0x80
 8000de2:	029b      	lsls	r3, r3, #10
 8000de4:	4013      	ands	r3, r2
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0xf2>
 8000de8:	e015      	b.n	8000e16 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dea:	f7ff fd07 	bl	80007fc <HAL_GetTick>
 8000dee:	0003      	movs	r3, r0
 8000df0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fd02 	bl	80007fc <HAL_GetTick>
 8000df8:	0002      	movs	r2, r0
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	@ 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e2e8      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e06:	4b82      	ldr	r3, [pc, #520]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	2380      	movs	r3, #128	@ 0x80
 8000e0c:	029b      	lsls	r3, r3, #10
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d1f0      	bne.n	8000df4 <HAL_RCC_OscConfig+0x11c>
 8000e12:	e000      	b.n	8000e16 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d100      	bne.n	8000e22 <HAL_RCC_OscConfig+0x14a>
 8000e20:	e06c      	b.n	8000efc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e22:	4b7b      	ldr	r3, [pc, #492]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	220c      	movs	r2, #12
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d00e      	beq.n	8000e4a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e2c:	4b78      	ldr	r3, [pc, #480]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	220c      	movs	r2, #12
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b08      	cmp	r3, #8
 8000e36:	d11f      	bne.n	8000e78 <HAL_RCC_OscConfig+0x1a0>
 8000e38:	4b75      	ldr	r3, [pc, #468]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	23c0      	movs	r3, #192	@ 0xc0
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	401a      	ands	r2, r3
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d116      	bne.n	8000e78 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4a:	4b71      	ldr	r3, [pc, #452]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2202      	movs	r2, #2
 8000e50:	4013      	ands	r3, r2
 8000e52:	d005      	beq.n	8000e60 <HAL_RCC_OscConfig+0x188>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d001      	beq.n	8000e60 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e2bb      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e60:	4b6b      	ldr	r3, [pc, #428]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	22f8      	movs	r2, #248	@ 0xf8
 8000e66:	4393      	bics	r3, r2
 8000e68:	0019      	movs	r1, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	00da      	lsls	r2, r3, #3
 8000e70:	4b67      	ldr	r3, [pc, #412]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000e72:	430a      	orrs	r2, r1
 8000e74:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e76:	e041      	b.n	8000efc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d024      	beq.n	8000eca <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e80:	4b63      	ldr	r3, [pc, #396]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b62      	ldr	r3, [pc, #392]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000e86:	2101      	movs	r1, #1
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fcb6 	bl	80007fc <HAL_GetTick>
 8000e90:	0003      	movs	r3, r0
 8000e92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e96:	f7ff fcb1 	bl	80007fc <HAL_GetTick>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e297      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea8:	4b59      	ldr	r3, [pc, #356]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2202      	movs	r2, #2
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d0f1      	beq.n	8000e96 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb2:	4b57      	ldr	r3, [pc, #348]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	22f8      	movs	r2, #248	@ 0xf8
 8000eb8:	4393      	bics	r3, r2
 8000eba:	0019      	movs	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	00da      	lsls	r2, r3, #3
 8000ec2:	4b53      	ldr	r3, [pc, #332]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e018      	b.n	8000efc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eca:	4b51      	ldr	r3, [pc, #324]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b50      	ldr	r3, [pc, #320]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fc91 	bl	80007fc <HAL_GetTick>
 8000eda:	0003      	movs	r3, r0
 8000edc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ee0:	f7ff fc8c 	bl	80007fc <HAL_GetTick>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e272      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef2:	4b47      	ldr	r3, [pc, #284]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d1f1      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2208      	movs	r2, #8
 8000f02:	4013      	ands	r3, r2
 8000f04:	d036      	beq.n	8000f74 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d019      	beq.n	8000f42 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0e:	4b40      	ldr	r3, [pc, #256]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f12:	4b3f      	ldr	r3, [pc, #252]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fc6f 	bl	80007fc <HAL_GetTick>
 8000f1e:	0003      	movs	r3, r0
 8000f20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f24:	f7ff fc6a 	bl	80007fc <HAL_GetTick>
 8000f28:	0002      	movs	r2, r0
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e250      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f36:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d0f1      	beq.n	8000f24 <HAL_RCC_OscConfig+0x24c>
 8000f40:	e018      	b.n	8000f74 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f42:	4b33      	ldr	r3, [pc, #204]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000f44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f46:	4b32      	ldr	r3, [pc, #200]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	438a      	bics	r2, r1
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4e:	f7ff fc55 	bl	80007fc <HAL_GetTick>
 8000f52:	0003      	movs	r3, r0
 8000f54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f56:	e008      	b.n	8000f6a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f58:	f7ff fc50 	bl	80007fc <HAL_GetTick>
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e236      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6a:	4b29      	ldr	r3, [pc, #164]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6e:	2202      	movs	r2, #2
 8000f70:	4013      	ands	r3, r2
 8000f72:	d1f1      	bne.n	8000f58 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2204      	movs	r2, #4
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d100      	bne.n	8000f80 <HAL_RCC_OscConfig+0x2a8>
 8000f7e:	e0b5      	b.n	80010ec <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f80:	201f      	movs	r0, #31
 8000f82:	183b      	adds	r3, r7, r0
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f88:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000f8a:	69da      	ldr	r2, [r3, #28]
 8000f8c:	2380      	movs	r3, #128	@ 0x80
 8000f8e:	055b      	lsls	r3, r3, #21
 8000f90:	4013      	ands	r3, r2
 8000f92:	d110      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000f96:	69da      	ldr	r2, [r3, #28]
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000f9a:	2180      	movs	r1, #128	@ 0x80
 8000f9c:	0549      	lsls	r1, r1, #21
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	61da      	str	r2, [r3, #28]
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8000fa4:	69da      	ldr	r2, [r3, #28]
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	055b      	lsls	r3, r3, #21
 8000faa:	4013      	ands	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fb0:	183b      	adds	r3, r7, r0
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_RCC_OscConfig+0x344>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	2380      	movs	r3, #128	@ 0x80
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d11a      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <HAL_RCC_OscConfig+0x344>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_RCC_OscConfig+0x344>)
 8000fc8:	2180      	movs	r1, #128	@ 0x80
 8000fca:	0049      	lsls	r1, r1, #1
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fd0:	f7ff fc14 	bl	80007fc <HAL_GetTick>
 8000fd4:	0003      	movs	r3, r0
 8000fd6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fda:	f7ff fc0f 	bl	80007fc <HAL_GetTick>
 8000fde:	0002      	movs	r2, r0
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b64      	cmp	r3, #100	@ 0x64
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e1f5      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fec:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <HAL_RCC_OscConfig+0x344>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d10f      	bne.n	8001020 <HAL_RCC_OscConfig+0x348>
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8001002:	6a1a      	ldr	r2, [r3, #32]
 8001004:	4b02      	ldr	r3, [pc, #8]	@ (8001010 <HAL_RCC_OscConfig+0x338>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	621a      	str	r2, [r3, #32]
 800100c:	e036      	b.n	800107c <HAL_RCC_OscConfig+0x3a4>
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	40021000 	.word	0x40021000
 8001014:	fffeffff 	.word	0xfffeffff
 8001018:	fffbffff 	.word	0xfffbffff
 800101c:	40007000 	.word	0x40007000
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10c      	bne.n	8001042 <HAL_RCC_OscConfig+0x36a>
 8001028:	4bca      	ldr	r3, [pc, #808]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800102a:	6a1a      	ldr	r2, [r3, #32]
 800102c:	4bc9      	ldr	r3, [pc, #804]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800102e:	2101      	movs	r1, #1
 8001030:	438a      	bics	r2, r1
 8001032:	621a      	str	r2, [r3, #32]
 8001034:	4bc7      	ldr	r3, [pc, #796]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	4bc6      	ldr	r3, [pc, #792]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800103a:	2104      	movs	r1, #4
 800103c:	438a      	bics	r2, r1
 800103e:	621a      	str	r2, [r3, #32]
 8001040:	e01c      	b.n	800107c <HAL_RCC_OscConfig+0x3a4>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b05      	cmp	r3, #5
 8001048:	d10c      	bne.n	8001064 <HAL_RCC_OscConfig+0x38c>
 800104a:	4bc2      	ldr	r3, [pc, #776]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800104c:	6a1a      	ldr	r2, [r3, #32]
 800104e:	4bc1      	ldr	r3, [pc, #772]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001050:	2104      	movs	r1, #4
 8001052:	430a      	orrs	r2, r1
 8001054:	621a      	str	r2, [r3, #32]
 8001056:	4bbf      	ldr	r3, [pc, #764]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001058:	6a1a      	ldr	r2, [r3, #32]
 800105a:	4bbe      	ldr	r3, [pc, #760]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800105c:	2101      	movs	r1, #1
 800105e:	430a      	orrs	r2, r1
 8001060:	621a      	str	r2, [r3, #32]
 8001062:	e00b      	b.n	800107c <HAL_RCC_OscConfig+0x3a4>
 8001064:	4bbb      	ldr	r3, [pc, #748]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001066:	6a1a      	ldr	r2, [r3, #32]
 8001068:	4bba      	ldr	r3, [pc, #744]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800106a:	2101      	movs	r1, #1
 800106c:	438a      	bics	r2, r1
 800106e:	621a      	str	r2, [r3, #32]
 8001070:	4bb8      	ldr	r3, [pc, #736]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001072:	6a1a      	ldr	r2, [r3, #32]
 8001074:	4bb7      	ldr	r3, [pc, #732]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001076:	2104      	movs	r1, #4
 8001078:	438a      	bics	r2, r1
 800107a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d014      	beq.n	80010ae <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001084:	f7ff fbba 	bl	80007fc <HAL_GetTick>
 8001088:	0003      	movs	r3, r0
 800108a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108c:	e009      	b.n	80010a2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800108e:	f7ff fbb5 	bl	80007fc <HAL_GetTick>
 8001092:	0002      	movs	r2, r0
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	4aaf      	ldr	r2, [pc, #700]	@ (8001358 <HAL_RCC_OscConfig+0x680>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d901      	bls.n	80010a2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e19a      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a2:	4bac      	ldr	r3, [pc, #688]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	2202      	movs	r2, #2
 80010a8:	4013      	ands	r3, r2
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x3b6>
 80010ac:	e013      	b.n	80010d6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ae:	f7ff fba5 	bl	80007fc <HAL_GetTick>
 80010b2:	0003      	movs	r3, r0
 80010b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b6:	e009      	b.n	80010cc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b8:	f7ff fba0 	bl	80007fc <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	4aa5      	ldr	r2, [pc, #660]	@ (8001358 <HAL_RCC_OscConfig+0x680>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e185      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010cc:	4ba1      	ldr	r3, [pc, #644]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	2202      	movs	r2, #2
 80010d2:	4013      	ands	r3, r2
 80010d4:	d1f0      	bne.n	80010b8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010d6:	231f      	movs	r3, #31
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d105      	bne.n	80010ec <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e0:	4b9c      	ldr	r3, [pc, #624]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80010e2:	69da      	ldr	r2, [r3, #28]
 80010e4:	4b9b      	ldr	r3, [pc, #620]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80010e6:	499d      	ldr	r1, [pc, #628]	@ (800135c <HAL_RCC_OscConfig+0x684>)
 80010e8:	400a      	ands	r2, r1
 80010ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2210      	movs	r2, #16
 80010f2:	4013      	ands	r3, r2
 80010f4:	d063      	beq.n	80011be <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d12a      	bne.n	8001154 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010fe:	4b95      	ldr	r3, [pc, #596]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001100:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001102:	4b94      	ldr	r3, [pc, #592]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001104:	2104      	movs	r1, #4
 8001106:	430a      	orrs	r2, r1
 8001108:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800110a:	4b92      	ldr	r3, [pc, #584]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800110c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800110e:	4b91      	ldr	r3, [pc, #580]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001110:	2101      	movs	r1, #1
 8001112:	430a      	orrs	r2, r1
 8001114:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff fb71 	bl	80007fc <HAL_GetTick>
 800111a:	0003      	movs	r3, r0
 800111c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001120:	f7ff fb6c 	bl	80007fc <HAL_GetTick>
 8001124:	0002      	movs	r2, r0
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e152      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001132:	4b88      	ldr	r3, [pc, #544]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001136:	2202      	movs	r2, #2
 8001138:	4013      	ands	r3, r2
 800113a:	d0f1      	beq.n	8001120 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800113c:	4b85      	ldr	r3, [pc, #532]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800113e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001140:	22f8      	movs	r2, #248	@ 0xf8
 8001142:	4393      	bics	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	699b      	ldr	r3, [r3, #24]
 800114a:	00da      	lsls	r2, r3, #3
 800114c:	4b81      	ldr	r3, [pc, #516]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800114e:	430a      	orrs	r2, r1
 8001150:	635a      	str	r2, [r3, #52]	@ 0x34
 8001152:	e034      	b.n	80011be <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	3305      	adds	r3, #5
 800115a:	d111      	bne.n	8001180 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800115c:	4b7d      	ldr	r3, [pc, #500]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800115e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001160:	4b7c      	ldr	r3, [pc, #496]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001162:	2104      	movs	r1, #4
 8001164:	438a      	bics	r2, r1
 8001166:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001168:	4b7a      	ldr	r3, [pc, #488]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800116a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800116c:	22f8      	movs	r2, #248	@ 0xf8
 800116e:	4393      	bics	r3, r2
 8001170:	0019      	movs	r1, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	00da      	lsls	r2, r3, #3
 8001178:	4b76      	ldr	r3, [pc, #472]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800117a:	430a      	orrs	r2, r1
 800117c:	635a      	str	r2, [r3, #52]	@ 0x34
 800117e:	e01e      	b.n	80011be <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001180:	4b74      	ldr	r3, [pc, #464]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001184:	4b73      	ldr	r3, [pc, #460]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001186:	2104      	movs	r1, #4
 8001188:	430a      	orrs	r2, r1
 800118a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800118c:	4b71      	ldr	r3, [pc, #452]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800118e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001190:	4b70      	ldr	r3, [pc, #448]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001192:	2101      	movs	r1, #1
 8001194:	438a      	bics	r2, r1
 8001196:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff fb30 	bl	80007fc <HAL_GetTick>
 800119c:	0003      	movs	r3, r0
 800119e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011a2:	f7ff fb2b 	bl	80007fc <HAL_GetTick>
 80011a6:	0002      	movs	r2, r0
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e111      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011b4:	4b67      	ldr	r3, [pc, #412]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80011b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b8:	2202      	movs	r2, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d1f1      	bne.n	80011a2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2220      	movs	r2, #32
 80011c4:	4013      	ands	r3, r2
 80011c6:	d05c      	beq.n	8001282 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011c8:	4b62      	ldr	r3, [pc, #392]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	220c      	movs	r2, #12
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b0c      	cmp	r3, #12
 80011d2:	d00e      	beq.n	80011f2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	220c      	movs	r2, #12
 80011da:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d114      	bne.n	800120a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80011e0:	4b5c      	ldr	r3, [pc, #368]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	23c0      	movs	r3, #192	@ 0xc0
 80011e6:	025b      	lsls	r3, r3, #9
 80011e8:	401a      	ands	r2, r3
 80011ea:	23c0      	movs	r3, #192	@ 0xc0
 80011ec:	025b      	lsls	r3, r3, #9
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d10b      	bne.n	800120a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80011f2:	4b58      	ldr	r3, [pc, #352]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80011f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011f6:	2380      	movs	r3, #128	@ 0x80
 80011f8:	029b      	lsls	r3, r3, #10
 80011fa:	4013      	ands	r3, r2
 80011fc:	d040      	beq.n	8001280 <HAL_RCC_OscConfig+0x5a8>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d03c      	beq.n	8001280 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0e6      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d01b      	beq.n	800124a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001212:	4b50      	ldr	r3, [pc, #320]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001216:	4b4f      	ldr	r3, [pc, #316]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001218:	2180      	movs	r1, #128	@ 0x80
 800121a:	0249      	lsls	r1, r1, #9
 800121c:	430a      	orrs	r2, r1
 800121e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff faec 	bl	80007fc <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800122a:	f7ff fae7 	bl	80007fc <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0cd      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800123c:	4b45      	ldr	r3, [pc, #276]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800123e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001240:	2380      	movs	r3, #128	@ 0x80
 8001242:	029b      	lsls	r3, r3, #10
 8001244:	4013      	ands	r3, r2
 8001246:	d0f0      	beq.n	800122a <HAL_RCC_OscConfig+0x552>
 8001248:	e01b      	b.n	8001282 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800124a:	4b42      	ldr	r3, [pc, #264]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800124c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800124e:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001250:	4943      	ldr	r1, [pc, #268]	@ (8001360 <HAL_RCC_OscConfig+0x688>)
 8001252:	400a      	ands	r2, r1
 8001254:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7ff fad1 	bl	80007fc <HAL_GetTick>
 800125a:	0003      	movs	r3, r0
 800125c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001260:	f7ff facc 	bl	80007fc <HAL_GetTick>
 8001264:	0002      	movs	r2, r0
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e0b2      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001272:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	029b      	lsls	r3, r3, #10
 800127a:	4013      	ands	r3, r2
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0x588>
 800127e:	e000      	b.n	8001282 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001280:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	2b00      	cmp	r3, #0
 8001288:	d100      	bne.n	800128c <HAL_RCC_OscConfig+0x5b4>
 800128a:	e0a4      	b.n	80013d6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800128c:	4b31      	ldr	r3, [pc, #196]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	220c      	movs	r2, #12
 8001292:	4013      	ands	r3, r2
 8001294:	2b08      	cmp	r3, #8
 8001296:	d100      	bne.n	800129a <HAL_RCC_OscConfig+0x5c2>
 8001298:	e078      	b.n	800138c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d14c      	bne.n	800133c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80012a8:	492e      	ldr	r1, [pc, #184]	@ (8001364 <HAL_RCC_OscConfig+0x68c>)
 80012aa:	400a      	ands	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff faa5 	bl	80007fc <HAL_GetTick>
 80012b2:	0003      	movs	r3, r0
 80012b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b8:	f7ff faa0 	bl	80007fc <HAL_GetTick>
 80012bc:	0002      	movs	r2, r0
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e086      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	@ 0x80
 80012d0:	049b      	lsls	r3, r3, #18
 80012d2:	4013      	ands	r3, r2
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80012d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012da:	220f      	movs	r2, #15
 80012dc:	4393      	bics	r3, r2
 80012de:	0019      	movs	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80012e6:	430a      	orrs	r2, r1
 80012e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001368 <HAL_RCC_OscConfig+0x690>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	0019      	movs	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012fc:	431a      	orrs	r2, r3
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001300:	430a      	orrs	r2, r1
 8001302:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001304:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800130a:	2180      	movs	r1, #128	@ 0x80
 800130c:	0449      	lsls	r1, r1, #17
 800130e:	430a      	orrs	r2, r1
 8001310:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fa73 	bl	80007fc <HAL_GetTick>
 8001316:	0003      	movs	r3, r0
 8001318:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131c:	f7ff fa6e 	bl	80007fc <HAL_GetTick>
 8001320:	0002      	movs	r2, r0
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e054      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	2380      	movs	r3, #128	@ 0x80
 8001334:	049b      	lsls	r3, r3, #18
 8001336:	4013      	ands	r3, r2
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x644>
 800133a:	e04c      	b.n	80013d6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <HAL_RCC_OscConfig+0x67c>)
 8001342:	4908      	ldr	r1, [pc, #32]	@ (8001364 <HAL_RCC_OscConfig+0x68c>)
 8001344:	400a      	ands	r2, r1
 8001346:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fa58 	bl	80007fc <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001350:	e015      	b.n	800137e <HAL_RCC_OscConfig+0x6a6>
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	40021000 	.word	0x40021000
 8001358:	00001388 	.word	0x00001388
 800135c:	efffffff 	.word	0xefffffff
 8001360:	fffeffff 	.word	0xfffeffff
 8001364:	feffffff 	.word	0xfeffffff
 8001368:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff fa46 	bl	80007fc <HAL_GetTick>
 8001370:	0002      	movs	r2, r0
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e02c      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137e:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <HAL_RCC_OscConfig+0x708>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2380      	movs	r3, #128	@ 0x80
 8001384:	049b      	lsls	r3, r3, #18
 8001386:	4013      	ands	r3, r2
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x694>
 800138a:	e024      	b.n	80013d6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e01f      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_RCC_OscConfig+0x708>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <HAL_RCC_OscConfig+0x708>)
 80013a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	23c0      	movs	r3, #192	@ 0xc0
 80013a8:	025b      	lsls	r3, r3, #9
 80013aa:	401a      	ands	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d10e      	bne.n	80013d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	220f      	movs	r2, #15
 80013b8:	401a      	ands	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013be:	429a      	cmp	r2, r3
 80013c0:	d107      	bne.n	80013d2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	23f0      	movs	r3, #240	@ 0xf0
 80013c6:	039b      	lsls	r3, r3, #14
 80013c8:	401a      	ands	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b008      	add	sp, #32
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0bf      	b.n	8001578 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f8:	4b61      	ldr	r3, [pc, #388]	@ (8001580 <HAL_RCC_ClockConfig+0x19c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2201      	movs	r2, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d911      	bls.n	800142a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b5e      	ldr	r3, [pc, #376]	@ (8001580 <HAL_RCC_ClockConfig+0x19c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2201      	movs	r2, #1
 800140c:	4393      	bics	r3, r2
 800140e:	0019      	movs	r1, r3
 8001410:	4b5b      	ldr	r3, [pc, #364]	@ (8001580 <HAL_RCC_ClockConfig+0x19c>)
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001418:	4b59      	ldr	r3, [pc, #356]	@ (8001580 <HAL_RCC_ClockConfig+0x19c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	4013      	ands	r3, r2
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d001      	beq.n	800142a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0a6      	b.n	8001578 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2202      	movs	r2, #2
 8001430:	4013      	ands	r3, r2
 8001432:	d015      	beq.n	8001460 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2204      	movs	r2, #4
 800143a:	4013      	ands	r3, r2
 800143c:	d006      	beq.n	800144c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800143e:	4b51      	ldr	r3, [pc, #324]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	4b50      	ldr	r3, [pc, #320]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 8001444:	21e0      	movs	r1, #224	@ 0xe0
 8001446:	00c9      	lsls	r1, r1, #3
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800144c:	4b4d      	ldr	r3, [pc, #308]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	22f0      	movs	r2, #240	@ 0xf0
 8001452:	4393      	bics	r3, r2
 8001454:	0019      	movs	r1, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	4b4a      	ldr	r3, [pc, #296]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 800145c:	430a      	orrs	r2, r1
 800145e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2201      	movs	r2, #1
 8001466:	4013      	ands	r3, r2
 8001468:	d04c      	beq.n	8001504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	4b44      	ldr	r3, [pc, #272]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	@ 0x80
 8001478:	029b      	lsls	r3, r3, #10
 800147a:	4013      	ands	r3, r2
 800147c:	d120      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e07a      	b.n	8001578 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b3e      	ldr	r3, [pc, #248]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	049b      	lsls	r3, r3, #18
 8001492:	4013      	ands	r3, r2
 8001494:	d114      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e06e      	b.n	8001578 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014a2:	4b38      	ldr	r3, [pc, #224]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 80014a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	029b      	lsls	r3, r3, #10
 80014aa:	4013      	ands	r3, r2
 80014ac:	d108      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e062      	b.n	8001578 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e05b      	b.n	8001578 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c0:	4b30      	ldr	r3, [pc, #192]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	4393      	bics	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 80014d0:	430a      	orrs	r2, r1
 80014d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff f992 	bl	80007fc <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014dc:	e009      	b.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014de:	f7ff f98d 	bl	80007fc <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4a27      	ldr	r2, [pc, #156]	@ (8001588 <HAL_RCC_ClockConfig+0x1a4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e042      	b.n	8001578 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	4b24      	ldr	r3, [pc, #144]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	220c      	movs	r2, #12
 80014f8:	401a      	ands	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	429a      	cmp	r2, r3
 8001502:	d1ec      	bne.n	80014de <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <HAL_RCC_ClockConfig+0x19c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	4013      	ands	r3, r2
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d211      	bcs.n	8001536 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <HAL_RCC_ClockConfig+0x19c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	4393      	bics	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_RCC_ClockConfig+0x19c>)
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001524:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_RCC_ClockConfig+0x19c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e020      	b.n	8001578 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2204      	movs	r2, #4
 800153c:	4013      	ands	r3, r2
 800153e:	d009      	beq.n	8001554 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001540:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a11      	ldr	r2, [pc, #68]	@ (800158c <HAL_RCC_ClockConfig+0x1a8>)
 8001546:	4013      	ands	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	4b0d      	ldr	r3, [pc, #52]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001554:	f000 f820 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8001558:	0001      	movs	r1, r0
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_RCC_ClockConfig+0x1a0>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	220f      	movs	r2, #15
 8001562:	4013      	ands	r3, r2
 8001564:	4a0a      	ldr	r2, [pc, #40]	@ (8001590 <HAL_RCC_ClockConfig+0x1ac>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	000a      	movs	r2, r1
 800156a:	40da      	lsrs	r2, r3
 800156c:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <HAL_RCC_ClockConfig+0x1b0>)
 800156e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff f90f 	bl	8000794 <HAL_InitTick>
  
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40022000 	.word	0x40022000
 8001584:	40021000 	.word	0x40021000
 8001588:	00001388 	.word	0x00001388
 800158c:	fffff8ff 	.word	0xfffff8ff
 8001590:	08004a40 	.word	0x08004a40
 8001594:	20000000 	.word	0x20000000

08001598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80015b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <HAL_RCC_GetSysClockFreq+0xd0>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	220c      	movs	r2, #12
 80015bc:	4013      	ands	r3, r2
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d046      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0xb8>
 80015c2:	d848      	bhi.n	8001656 <HAL_RCC_GetSysClockFreq+0xbe>
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d002      	beq.n	80015ce <HAL_RCC_GetSysClockFreq+0x36>
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d003      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x3c>
 80015cc:	e043      	b.n	8001656 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015ce:	4b27      	ldr	r3, [pc, #156]	@ (800166c <HAL_RCC_GetSysClockFreq+0xd4>)
 80015d0:	613b      	str	r3, [r7, #16]
      break;
 80015d2:	e043      	b.n	800165c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	0c9b      	lsrs	r3, r3, #18
 80015d8:	220f      	movs	r2, #15
 80015da:	4013      	ands	r3, r2
 80015dc:	4a24      	ldr	r2, [pc, #144]	@ (8001670 <HAL_RCC_GetSysClockFreq+0xd8>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015e2:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <HAL_RCC_GetSysClockFreq+0xd0>)
 80015e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015e6:	220f      	movs	r2, #15
 80015e8:	4013      	ands	r3, r2
 80015ea:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <HAL_RCC_GetSysClockFreq+0xdc>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	23c0      	movs	r3, #192	@ 0xc0
 80015f4:	025b      	lsls	r3, r3, #9
 80015f6:	401a      	ands	r2, r3
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d109      	bne.n	8001614 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	481a      	ldr	r0, [pc, #104]	@ (800166c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001604:	f7fe fd80 	bl	8000108 <__udivsi3>
 8001608:	0003      	movs	r3, r0
 800160a:	001a      	movs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4353      	muls	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	e01a      	b.n	800164a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	23c0      	movs	r3, #192	@ 0xc0
 8001618:	025b      	lsls	r3, r3, #9
 800161a:	401a      	ands	r2, r3
 800161c:	23c0      	movs	r3, #192	@ 0xc0
 800161e:	025b      	lsls	r3, r3, #9
 8001620:	429a      	cmp	r2, r3
 8001622:	d109      	bne.n	8001638 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	4814      	ldr	r0, [pc, #80]	@ (8001678 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001628:	f7fe fd6e 	bl	8000108 <__udivsi3>
 800162c:	0003      	movs	r3, r0
 800162e:	001a      	movs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4353      	muls	r3, r2
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	e008      	b.n	800164a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	480c      	ldr	r0, [pc, #48]	@ (800166c <HAL_RCC_GetSysClockFreq+0xd4>)
 800163c:	f7fe fd64 	bl	8000108 <__udivsi3>
 8001640:	0003      	movs	r3, r0
 8001642:	001a      	movs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4353      	muls	r3, r2
 8001648:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	613b      	str	r3, [r7, #16]
      break;
 800164e:	e005      	b.n	800165c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001650:	4b09      	ldr	r3, [pc, #36]	@ (8001678 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001652:	613b      	str	r3, [r7, #16]
      break;
 8001654:	e002      	b.n	800165c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001656:	4b05      	ldr	r3, [pc, #20]	@ (800166c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001658:	613b      	str	r3, [r7, #16]
      break;
 800165a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800165c:	693b      	ldr	r3, [r7, #16]
}
 800165e:	0018      	movs	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	b006      	add	sp, #24
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			@ (mov r8, r8)
 8001668:	40021000 	.word	0x40021000
 800166c:	007a1200 	.word	0x007a1200
 8001670:	08004a58 	.word	0x08004a58
 8001674:	08004a68 	.word	0x08004a68
 8001678:	02dc6c00 	.word	0x02dc6c00

0800167c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001680:	4b02      	ldr	r3, [pc, #8]	@ (800168c <HAL_RCC_GetHCLKFreq+0x10>)
 8001682:	681b      	ldr	r3, [r3, #0]
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001694:	f7ff fff2 	bl	800167c <HAL_RCC_GetHCLKFreq>
 8001698:	0001      	movs	r1, r0
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	2207      	movs	r2, #7
 80016a2:	4013      	ands	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	40d9      	lsrs	r1, r3
 80016aa:	000b      	movs	r3, r1
}    
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	40021000 	.word	0x40021000
 80016b8:	08004a50 	.word	0x08004a50

080016bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	4013      	ands	r3, r2
 80016d6:	d100      	bne.n	80016da <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80016d8:	e08e      	b.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80016da:	2017      	movs	r0, #23
 80016dc:	183b      	adds	r3, r7, r0
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e2:	4b6e      	ldr	r3, [pc, #440]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	2380      	movs	r3, #128	@ 0x80
 80016e8:	055b      	lsls	r3, r3, #21
 80016ea:	4013      	ands	r3, r2
 80016ec:	d110      	bne.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b6b      	ldr	r3, [pc, #428]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	4b6a      	ldr	r3, [pc, #424]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016f4:	2180      	movs	r1, #128	@ 0x80
 80016f6:	0549      	lsls	r1, r1, #21
 80016f8:	430a      	orrs	r2, r1
 80016fa:	61da      	str	r2, [r3, #28]
 80016fc:	4b67      	ldr	r3, [pc, #412]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80016fe:	69da      	ldr	r2, [r3, #28]
 8001700:	2380      	movs	r3, #128	@ 0x80
 8001702:	055b      	lsls	r3, r3, #21
 8001704:	4013      	ands	r3, r2
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800170a:	183b      	adds	r3, r7, r0
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001710:	4b63      	ldr	r3, [pc, #396]	@ (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4013      	ands	r3, r2
 800171a:	d11a      	bne.n	8001752 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800171c:	4b60      	ldr	r3, [pc, #384]	@ (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b5f      	ldr	r3, [pc, #380]	@ (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001722:	2180      	movs	r1, #128	@ 0x80
 8001724:	0049      	lsls	r1, r1, #1
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172a:	f7ff f867 	bl	80007fc <HAL_GetTick>
 800172e:	0003      	movs	r3, r0
 8001730:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001732:	e008      	b.n	8001746 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001734:	f7ff f862 	bl	80007fc <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	@ 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0a6      	b.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001746:	4b56      	ldr	r3, [pc, #344]	@ (80018a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	@ 0x80
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4013      	ands	r3, r2
 8001750:	d0f0      	beq.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001752:	4b52      	ldr	r3, [pc, #328]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001754:	6a1a      	ldr	r2, [r3, #32]
 8001756:	23c0      	movs	r3, #192	@ 0xc0
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4013      	ands	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d034      	beq.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685a      	ldr	r2, [r3, #4]
 8001768:	23c0      	movs	r3, #192	@ 0xc0
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4013      	ands	r3, r2
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d02c      	beq.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001774:	4b49      	ldr	r3, [pc, #292]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a4a      	ldr	r2, [pc, #296]	@ (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800177a:	4013      	ands	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800177e:	4b47      	ldr	r3, [pc, #284]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001780:	6a1a      	ldr	r2, [r3, #32]
 8001782:	4b46      	ldr	r3, [pc, #280]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001784:	2180      	movs	r1, #128	@ 0x80
 8001786:	0249      	lsls	r1, r1, #9
 8001788:	430a      	orrs	r2, r1
 800178a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800178c:	4b43      	ldr	r3, [pc, #268]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800178e:	6a1a      	ldr	r2, [r3, #32]
 8001790:	4b42      	ldr	r3, [pc, #264]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001792:	4945      	ldr	r1, [pc, #276]	@ (80018a8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001794:	400a      	ands	r2, r1
 8001796:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001798:	4b40      	ldr	r3, [pc, #256]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2201      	movs	r2, #1
 80017a2:	4013      	ands	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f829 	bl	80007fc <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ae:	e009      	b.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b0:	f7ff f824 	bl	80007fc <HAL_GetTick>
 80017b4:	0002      	movs	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	4a3c      	ldr	r2, [pc, #240]	@ (80018ac <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e067      	b.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c4:	4b35      	ldr	r3, [pc, #212]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	2202      	movs	r2, #2
 80017ca:	4013      	ands	r3, r2
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017ce:	4b33      	ldr	r3, [pc, #204]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	4a34      	ldr	r2, [pc, #208]	@ (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	4b2f      	ldr	r3, [pc, #188]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017de:	430a      	orrs	r2, r1
 80017e0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017e2:	2317      	movs	r3, #23
 80017e4:	18fb      	adds	r3, r7, r3
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d105      	bne.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	4b2b      	ldr	r3, [pc, #172]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017ee:	69da      	ldr	r2, [r3, #28]
 80017f0:	4b2a      	ldr	r3, [pc, #168]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80017f2:	492f      	ldr	r1, [pc, #188]	@ (80018b0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4013      	ands	r3, r2
 8001800:	d009      	beq.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001802:	4b26      	ldr	r3, [pc, #152]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	2203      	movs	r2, #3
 8001808:	4393      	bics	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	4b22      	ldr	r3, [pc, #136]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001812:	430a      	orrs	r2, r1
 8001814:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2202      	movs	r2, #2
 800181c:	4013      	ands	r3, r2
 800181e:	d009      	beq.n	8001834 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001820:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	4a23      	ldr	r2, [pc, #140]	@ (80018b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001826:	4013      	ands	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001830:	430a      	orrs	r2, r1
 8001832:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2220      	movs	r2, #32
 800183a:	4013      	ands	r3, r2
 800183c:	d009      	beq.n	8001852 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800183e:	4b17      	ldr	r3, [pc, #92]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	2210      	movs	r2, #16
 8001844:	4393      	bics	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	4b13      	ldr	r3, [pc, #76]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800184e:	430a      	orrs	r2, r1
 8001850:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	@ 0x80
 8001858:	029b      	lsls	r3, r3, #10
 800185a:	4013      	ands	r3, r2
 800185c:	d009      	beq.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800185e:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	2280      	movs	r2, #128	@ 0x80
 8001864:	4393      	bics	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699a      	ldr	r2, [r3, #24]
 800186c:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800186e:	430a      	orrs	r2, r1
 8001870:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	2380      	movs	r3, #128	@ 0x80
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4013      	ands	r3, r2
 800187c:	d009      	beq.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	4393      	bics	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695a      	ldr	r2, [r3, #20]
 800188c:	4b03      	ldr	r3, [pc, #12]	@ (800189c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800188e:	430a      	orrs	r2, r1
 8001890:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b006      	add	sp, #24
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000
 80018a0:	40007000 	.word	0x40007000
 80018a4:	fffffcff 	.word	0xfffffcff
 80018a8:	fffeffff 	.word	0xfffeffff
 80018ac:	00001388 	.word	0x00001388
 80018b0:	efffffff 	.word	0xefffffff
 80018b4:	fffcffff 	.word	0xfffcffff

080018b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e042      	b.n	8001950 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	223d      	movs	r2, #61	@ 0x3d
 80018ce:	5c9b      	ldrb	r3, [r3, r2]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d107      	bne.n	80018e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	223c      	movs	r2, #60	@ 0x3c
 80018da:	2100      	movs	r1, #0
 80018dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	0018      	movs	r0, r3
 80018e2:	f7fe fea1 	bl	8000628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	223d      	movs	r2, #61	@ 0x3d
 80018ea:	2102      	movs	r1, #2
 80018ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	0019      	movs	r1, r3
 80018f8:	0010      	movs	r0, r2
 80018fa:	f000 f901 	bl	8001b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2246      	movs	r2, #70	@ 0x46
 8001902:	2101      	movs	r1, #1
 8001904:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	223e      	movs	r2, #62	@ 0x3e
 800190a:	2101      	movs	r1, #1
 800190c:	5499      	strb	r1, [r3, r2]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	223f      	movs	r2, #63	@ 0x3f
 8001912:	2101      	movs	r1, #1
 8001914:	5499      	strb	r1, [r3, r2]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2240      	movs	r2, #64	@ 0x40
 800191a:	2101      	movs	r1, #1
 800191c:	5499      	strb	r1, [r3, r2]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2241      	movs	r2, #65	@ 0x41
 8001922:	2101      	movs	r1, #1
 8001924:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2242      	movs	r2, #66	@ 0x42
 800192a:	2101      	movs	r1, #1
 800192c:	5499      	strb	r1, [r3, r2]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2243      	movs	r2, #67	@ 0x43
 8001932:	2101      	movs	r1, #1
 8001934:	5499      	strb	r1, [r3, r2]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2244      	movs	r2, #68	@ 0x44
 800193a:	2101      	movs	r1, #1
 800193c:	5499      	strb	r1, [r3, r2]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2245      	movs	r2, #69	@ 0x45
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	223d      	movs	r2, #61	@ 0x3d
 800194a:	2101      	movs	r1, #1
 800194c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800194e:	2300      	movs	r3, #0
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001962:	230f      	movs	r3, #15
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	223c      	movs	r2, #60	@ 0x3c
 800196e:	5c9b      	ldrb	r3, [r3, r2]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_TIM_ConfigClockSource+0x20>
 8001974:	2302      	movs	r3, #2
 8001976:	e0bc      	b.n	8001af2 <HAL_TIM_ConfigClockSource+0x19a>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	223c      	movs	r2, #60	@ 0x3c
 800197c:	2101      	movs	r1, #1
 800197e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	223d      	movs	r2, #61	@ 0x3d
 8001984:	2102      	movs	r1, #2
 8001986:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2277      	movs	r2, #119	@ 0x77
 8001994:	4393      	bics	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4a58      	ldr	r2, [pc, #352]	@ (8001afc <HAL_TIM_ConfigClockSource+0x1a4>)
 800199c:	4013      	ands	r3, r2
 800199e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2280      	movs	r2, #128	@ 0x80
 80019ae:	0192      	lsls	r2, r2, #6
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d040      	beq.n	8001a36 <HAL_TIM_ConfigClockSource+0xde>
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	0192      	lsls	r2, r2, #6
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d900      	bls.n	80019be <HAL_TIM_ConfigClockSource+0x66>
 80019bc:	e088      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x178>
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	0152      	lsls	r2, r2, #5
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d100      	bne.n	80019c8 <HAL_TIM_ConfigClockSource+0x70>
 80019c6:	e088      	b.n	8001ada <HAL_TIM_ConfigClockSource+0x182>
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	0152      	lsls	r2, r2, #5
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d900      	bls.n	80019d2 <HAL_TIM_ConfigClockSource+0x7a>
 80019d0:	e07e      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x178>
 80019d2:	2b70      	cmp	r3, #112	@ 0x70
 80019d4:	d018      	beq.n	8001a08 <HAL_TIM_ConfigClockSource+0xb0>
 80019d6:	d900      	bls.n	80019da <HAL_TIM_ConfigClockSource+0x82>
 80019d8:	e07a      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x178>
 80019da:	2b60      	cmp	r3, #96	@ 0x60
 80019dc:	d04f      	beq.n	8001a7e <HAL_TIM_ConfigClockSource+0x126>
 80019de:	d900      	bls.n	80019e2 <HAL_TIM_ConfigClockSource+0x8a>
 80019e0:	e076      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x178>
 80019e2:	2b50      	cmp	r3, #80	@ 0x50
 80019e4:	d03b      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0x106>
 80019e6:	d900      	bls.n	80019ea <HAL_TIM_ConfigClockSource+0x92>
 80019e8:	e072      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x178>
 80019ea:	2b40      	cmp	r3, #64	@ 0x40
 80019ec:	d057      	beq.n	8001a9e <HAL_TIM_ConfigClockSource+0x146>
 80019ee:	d900      	bls.n	80019f2 <HAL_TIM_ConfigClockSource+0x9a>
 80019f0:	e06e      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x178>
 80019f2:	2b30      	cmp	r3, #48	@ 0x30
 80019f4:	d063      	beq.n	8001abe <HAL_TIM_ConfigClockSource+0x166>
 80019f6:	d86b      	bhi.n	8001ad0 <HAL_TIM_ConfigClockSource+0x178>
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	d060      	beq.n	8001abe <HAL_TIM_ConfigClockSource+0x166>
 80019fc:	d868      	bhi.n	8001ad0 <HAL_TIM_ConfigClockSource+0x178>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d05d      	beq.n	8001abe <HAL_TIM_ConfigClockSource+0x166>
 8001a02:	2b10      	cmp	r3, #16
 8001a04:	d05b      	beq.n	8001abe <HAL_TIM_ConfigClockSource+0x166>
 8001a06:	e063      	b.n	8001ad0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a18:	f000 f97a 	bl	8001d10 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	2277      	movs	r2, #119	@ 0x77
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	609a      	str	r2, [r3, #8]
      break;
 8001a34:	e052      	b.n	8001adc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a46:	f000 f963 	bl	8001d10 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2180      	movs	r1, #128	@ 0x80
 8001a56:	01c9      	lsls	r1, r1, #7
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	609a      	str	r2, [r3, #8]
      break;
 8001a5c:	e03e      	b.n	8001adc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	f000 f8d6 	bl	8001c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2150      	movs	r1, #80	@ 0x50
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 f930 	bl	8001cdc <TIM_ITRx_SetConfig>
      break;
 8001a7c:	e02e      	b.n	8001adc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	f000 f8f4 	bl	8001c78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2160      	movs	r1, #96	@ 0x60
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 f920 	bl	8001cdc <TIM_ITRx_SetConfig>
      break;
 8001a9c:	e01e      	b.n	8001adc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001aaa:	001a      	movs	r2, r3
 8001aac:	f000 f8b6 	bl	8001c1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2140      	movs	r1, #64	@ 0x40
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f000 f910 	bl	8001cdc <TIM_ITRx_SetConfig>
      break;
 8001abc:	e00e      	b.n	8001adc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	0010      	movs	r0, r2
 8001aca:	f000 f907 	bl	8001cdc <TIM_ITRx_SetConfig>
      break;
 8001ace:	e005      	b.n	8001adc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
      break;
 8001ad8:	e000      	b.n	8001adc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001ada:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	223d      	movs	r2, #61	@ 0x3d
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	223c      	movs	r2, #60	@ 0x3c
 8001ae8:	2100      	movs	r1, #0
 8001aea:	5499      	strb	r1, [r3, r2]

  return status;
 8001aec:	230f      	movs	r3, #15
 8001aee:	18fb      	adds	r3, r7, r3
 8001af0:	781b      	ldrb	r3, [r3, #0]
}
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b004      	add	sp, #16
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	ffff00ff 	.word	0xffff00ff

08001b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3b      	ldr	r2, [pc, #236]	@ (8001c00 <TIM_Base_SetConfig+0x100>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d008      	beq.n	8001b2a <TIM_Base_SetConfig+0x2a>
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	05db      	lsls	r3, r3, #23
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d003      	beq.n	8001b2a <TIM_Base_SetConfig+0x2a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a37      	ldr	r2, [pc, #220]	@ (8001c04 <TIM_Base_SetConfig+0x104>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d108      	bne.n	8001b3c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2270      	movs	r2, #112	@ 0x70
 8001b2e:	4393      	bics	r3, r2
 8001b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a30      	ldr	r2, [pc, #192]	@ (8001c00 <TIM_Base_SetConfig+0x100>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d018      	beq.n	8001b76 <TIM_Base_SetConfig+0x76>
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	2380      	movs	r3, #128	@ 0x80
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d013      	beq.n	8001b76 <TIM_Base_SetConfig+0x76>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a2c      	ldr	r2, [pc, #176]	@ (8001c04 <TIM_Base_SetConfig+0x104>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00f      	beq.n	8001b76 <TIM_Base_SetConfig+0x76>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a2b      	ldr	r2, [pc, #172]	@ (8001c08 <TIM_Base_SetConfig+0x108>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d00b      	beq.n	8001b76 <TIM_Base_SetConfig+0x76>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a2a      	ldr	r2, [pc, #168]	@ (8001c0c <TIM_Base_SetConfig+0x10c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d007      	beq.n	8001b76 <TIM_Base_SetConfig+0x76>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a29      	ldr	r2, [pc, #164]	@ (8001c10 <TIM_Base_SetConfig+0x110>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <TIM_Base_SetConfig+0x76>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a28      	ldr	r2, [pc, #160]	@ (8001c14 <TIM_Base_SetConfig+0x114>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d108      	bne.n	8001b88 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4a27      	ldr	r2, [pc, #156]	@ (8001c18 <TIM_Base_SetConfig+0x118>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2280      	movs	r2, #128	@ 0x80
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	001a      	movs	r2, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a13      	ldr	r2, [pc, #76]	@ (8001c00 <TIM_Base_SetConfig+0x100>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d00b      	beq.n	8001bce <TIM_Base_SetConfig+0xce>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <TIM_Base_SetConfig+0x10c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d007      	beq.n	8001bce <TIM_Base_SetConfig+0xce>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a13      	ldr	r2, [pc, #76]	@ (8001c10 <TIM_Base_SetConfig+0x110>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d003      	beq.n	8001bce <TIM_Base_SetConfig+0xce>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <TIM_Base_SetConfig+0x114>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d103      	bne.n	8001bd6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d106      	bne.n	8001bf6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4393      	bics	r3, r2
 8001bf0:	001a      	movs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	611a      	str	r2, [r3, #16]
  }
}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	b004      	add	sp, #16
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			@ (mov r8, r8)
 8001c00:	40012c00 	.word	0x40012c00
 8001c04:	40000400 	.word	0x40000400
 8001c08:	40002000 	.word	0x40002000
 8001c0c:	40014000 	.word	0x40014000
 8001c10:	40014400 	.word	0x40014400
 8001c14:	40014800 	.word	0x40014800
 8001c18:	fffffcff 	.word	0xfffffcff

08001c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4393      	bics	r3, r2
 8001c36:	001a      	movs	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	22f0      	movs	r2, #240	@ 0xf0
 8001c46:	4393      	bics	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	220a      	movs	r2, #10
 8001c58:	4393      	bics	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	621a      	str	r2, [r3, #32]
}
 8001c70:	46c0      	nop			@ (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b006      	add	sp, #24
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	2210      	movs	r2, #16
 8001c90:	4393      	bics	r3, r2
 8001c92:	001a      	movs	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd8 <TIM_TI2_ConfigInputStage+0x60>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	031b      	lsls	r3, r3, #12
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	22a0      	movs	r2, #160	@ 0xa0
 8001cb4:	4393      	bics	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	621a      	str	r2, [r3, #32]
}
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b006      	add	sp, #24
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	ffff0fff 	.word	0xffff0fff

08001cdc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2270      	movs	r2, #112	@ 0x70
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	609a      	str	r2, [r3, #8]
}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	b004      	add	sp, #16
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4a09      	ldr	r2, [pc, #36]	@ (8001d4c <TIM_ETR_SetConfig+0x3c>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	021a      	lsls	r2, r3, #8
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	609a      	str	r2, [r3, #8]
}
 8001d44:	46c0      	nop			@ (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b006      	add	sp, #24
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	ffff00ff 	.word	0xffff00ff

08001d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	223c      	movs	r2, #60	@ 0x3c
 8001d5e:	5c9b      	ldrb	r3, [r3, r2]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e047      	b.n	8001df8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	223c      	movs	r2, #60	@ 0x3c
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	223d      	movs	r2, #61	@ 0x3d
 8001d74:	2102      	movs	r1, #2
 8001d76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2270      	movs	r2, #112	@ 0x70
 8001d8c:	4393      	bics	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a16      	ldr	r2, [pc, #88]	@ (8001e00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00f      	beq.n	8001dcc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	@ 0x80
 8001db2:	05db      	lsls	r3, r3, #23
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d009      	beq.n	8001dcc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a11      	ldr	r2, [pc, #68]	@ (8001e04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a10      	ldr	r2, [pc, #64]	@ (8001e08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d10c      	bne.n	8001de6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2280      	movs	r2, #128	@ 0x80
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	223d      	movs	r2, #61	@ 0x3d
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	223c      	movs	r2, #60	@ 0x3c
 8001df2:	2100      	movs	r1, #0
 8001df4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b004      	add	sp, #16
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40012c00 	.word	0x40012c00
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40014000 	.word	0x40014000

08001e0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e044      	b.n	8001ea8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d107      	bne.n	8001e36 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2278      	movs	r2, #120	@ 0x78
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7fe fc17 	bl	8000664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2224      	movs	r2, #36	@ 0x24
 8001e3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2101      	movs	r1, #1
 8001e48:	438a      	bics	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 f9b4 	bl	80021c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f000 f828 	bl	8001eb4 <UART_SetConfig>
 8001e64:	0003      	movs	r3, r0
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e01c      	b.n	8001ea8 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	490d      	ldr	r1, [pc, #52]	@ (8001eb0 <HAL_UART_Init+0xa4>)
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	212a      	movs	r1, #42	@ 0x2a
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2101      	movs	r1, #1
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	0018      	movs	r0, r3
 8001ea2:	f000 fa43 	bl	800232c <UART_CheckIdleState>
 8001ea6:	0003      	movs	r3, r0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	ffffb7ff 	.word	0xffffb7ff

08001eb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ebc:	231e      	movs	r3, #30
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4aaf      	ldr	r2, [pc, #700]	@ (80021a0 <UART_SetConfig+0x2ec>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4aaa      	ldr	r2, [pc, #680]	@ (80021a4 <UART_SetConfig+0x2f0>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	0019      	movs	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4aa1      	ldr	r2, [pc, #644]	@ (80021a8 <UART_SetConfig+0x2f4>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	0019      	movs	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a9d      	ldr	r2, [pc, #628]	@ (80021ac <UART_SetConfig+0x2f8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d127      	bne.n	8001f8a <UART_SetConfig+0xd6>
 8001f3a:	4b9d      	ldr	r3, [pc, #628]	@ (80021b0 <UART_SetConfig+0x2fc>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	2203      	movs	r2, #3
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d00d      	beq.n	8001f62 <UART_SetConfig+0xae>
 8001f46:	d81b      	bhi.n	8001f80 <UART_SetConfig+0xcc>
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d014      	beq.n	8001f76 <UART_SetConfig+0xc2>
 8001f4c:	d818      	bhi.n	8001f80 <UART_SetConfig+0xcc>
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <UART_SetConfig+0xa4>
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d00a      	beq.n	8001f6c <UART_SetConfig+0xb8>
 8001f56:	e013      	b.n	8001f80 <UART_SetConfig+0xcc>
 8001f58:	231f      	movs	r3, #31
 8001f5a:	18fb      	adds	r3, r7, r3
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	e065      	b.n	800202e <UART_SetConfig+0x17a>
 8001f62:	231f      	movs	r3, #31
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	2202      	movs	r2, #2
 8001f68:	701a      	strb	r2, [r3, #0]
 8001f6a:	e060      	b.n	800202e <UART_SetConfig+0x17a>
 8001f6c:	231f      	movs	r3, #31
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	2204      	movs	r2, #4
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	e05b      	b.n	800202e <UART_SetConfig+0x17a>
 8001f76:	231f      	movs	r3, #31
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	2208      	movs	r2, #8
 8001f7c:	701a      	strb	r2, [r3, #0]
 8001f7e:	e056      	b.n	800202e <UART_SetConfig+0x17a>
 8001f80:	231f      	movs	r3, #31
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2210      	movs	r2, #16
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e051      	b.n	800202e <UART_SetConfig+0x17a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a89      	ldr	r2, [pc, #548]	@ (80021b4 <UART_SetConfig+0x300>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d134      	bne.n	8001ffe <UART_SetConfig+0x14a>
 8001f94:	4b86      	ldr	r3, [pc, #536]	@ (80021b0 <UART_SetConfig+0x2fc>)
 8001f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f98:	23c0      	movs	r3, #192	@ 0xc0
 8001f9a:	029b      	lsls	r3, r3, #10
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	22c0      	movs	r2, #192	@ 0xc0
 8001fa0:	0292      	lsls	r2, r2, #10
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d017      	beq.n	8001fd6 <UART_SetConfig+0x122>
 8001fa6:	22c0      	movs	r2, #192	@ 0xc0
 8001fa8:	0292      	lsls	r2, r2, #10
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d822      	bhi.n	8001ff4 <UART_SetConfig+0x140>
 8001fae:	2280      	movs	r2, #128	@ 0x80
 8001fb0:	0292      	lsls	r2, r2, #10
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d019      	beq.n	8001fea <UART_SetConfig+0x136>
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	0292      	lsls	r2, r2, #10
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d81a      	bhi.n	8001ff4 <UART_SetConfig+0x140>
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d004      	beq.n	8001fcc <UART_SetConfig+0x118>
 8001fc2:	2280      	movs	r2, #128	@ 0x80
 8001fc4:	0252      	lsls	r2, r2, #9
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00a      	beq.n	8001fe0 <UART_SetConfig+0x12c>
 8001fca:	e013      	b.n	8001ff4 <UART_SetConfig+0x140>
 8001fcc:	231f      	movs	r3, #31
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
 8001fd4:	e02b      	b.n	800202e <UART_SetConfig+0x17a>
 8001fd6:	231f      	movs	r3, #31
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	2202      	movs	r2, #2
 8001fdc:	701a      	strb	r2, [r3, #0]
 8001fde:	e026      	b.n	800202e <UART_SetConfig+0x17a>
 8001fe0:	231f      	movs	r3, #31
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	701a      	strb	r2, [r3, #0]
 8001fe8:	e021      	b.n	800202e <UART_SetConfig+0x17a>
 8001fea:	231f      	movs	r3, #31
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2208      	movs	r2, #8
 8001ff0:	701a      	strb	r2, [r3, #0]
 8001ff2:	e01c      	b.n	800202e <UART_SetConfig+0x17a>
 8001ff4:	231f      	movs	r3, #31
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	e017      	b.n	800202e <UART_SetConfig+0x17a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6d      	ldr	r2, [pc, #436]	@ (80021b8 <UART_SetConfig+0x304>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d104      	bne.n	8002012 <UART_SetConfig+0x15e>
 8002008:	231f      	movs	r3, #31
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	e00d      	b.n	800202e <UART_SetConfig+0x17a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a69      	ldr	r2, [pc, #420]	@ (80021bc <UART_SetConfig+0x308>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d104      	bne.n	8002026 <UART_SetConfig+0x172>
 800201c:	231f      	movs	r3, #31
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	e003      	b.n	800202e <UART_SetConfig+0x17a>
 8002026:	231f      	movs	r3, #31
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2210      	movs	r2, #16
 800202c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	2380      	movs	r3, #128	@ 0x80
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	429a      	cmp	r2, r3
 8002038:	d15c      	bne.n	80020f4 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800203a:	231f      	movs	r3, #31
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d015      	beq.n	8002070 <UART_SetConfig+0x1bc>
 8002044:	dc18      	bgt.n	8002078 <UART_SetConfig+0x1c4>
 8002046:	2b04      	cmp	r3, #4
 8002048:	d00d      	beq.n	8002066 <UART_SetConfig+0x1b2>
 800204a:	dc15      	bgt.n	8002078 <UART_SetConfig+0x1c4>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <UART_SetConfig+0x1a2>
 8002050:	2b02      	cmp	r3, #2
 8002052:	d005      	beq.n	8002060 <UART_SetConfig+0x1ac>
 8002054:	e010      	b.n	8002078 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002056:	f7ff fb1b 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 800205a:	0003      	movs	r3, r0
 800205c:	61bb      	str	r3, [r7, #24]
        break;
 800205e:	e012      	b.n	8002086 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002060:	4b57      	ldr	r3, [pc, #348]	@ (80021c0 <UART_SetConfig+0x30c>)
 8002062:	61bb      	str	r3, [r7, #24]
        break;
 8002064:	e00f      	b.n	8002086 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002066:	f7ff fa97 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 800206a:	0003      	movs	r3, r0
 800206c:	61bb      	str	r3, [r7, #24]
        break;
 800206e:	e00a      	b.n	8002086 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	61bb      	str	r3, [r7, #24]
        break;
 8002076:	e006      	b.n	8002086 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800207c:	231e      	movs	r3, #30
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
        break;
 8002084:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d100      	bne.n	800208e <UART_SetConfig+0x1da>
 800208c:	e07a      	b.n	8002184 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	005a      	lsls	r2, r3, #1
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	085b      	lsrs	r3, r3, #1
 8002098:	18d2      	adds	r2, r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	0019      	movs	r1, r3
 80020a0:	0010      	movs	r0, r2
 80020a2:	f7fe f831 	bl	8000108 <__udivsi3>
 80020a6:	0003      	movs	r3, r0
 80020a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b0f      	cmp	r3, #15
 80020ae:	d91c      	bls.n	80020ea <UART_SetConfig+0x236>
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	2380      	movs	r3, #128	@ 0x80
 80020b4:	025b      	lsls	r3, r3, #9
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d217      	bcs.n	80020ea <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	200e      	movs	r0, #14
 80020c0:	183b      	adds	r3, r7, r0
 80020c2:	210f      	movs	r1, #15
 80020c4:	438a      	bics	r2, r1
 80020c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2207      	movs	r2, #7
 80020d0:	4013      	ands	r3, r2
 80020d2:	b299      	uxth	r1, r3
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	183a      	adds	r2, r7, r0
 80020d8:	8812      	ldrh	r2, [r2, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	183a      	adds	r2, r7, r0
 80020e4:	8812      	ldrh	r2, [r2, #0]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	e04c      	b.n	8002184 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80020ea:	231e      	movs	r3, #30
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e047      	b.n	8002184 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80020f4:	231f      	movs	r3, #31
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d015      	beq.n	800212a <UART_SetConfig+0x276>
 80020fe:	dc18      	bgt.n	8002132 <UART_SetConfig+0x27e>
 8002100:	2b04      	cmp	r3, #4
 8002102:	d00d      	beq.n	8002120 <UART_SetConfig+0x26c>
 8002104:	dc15      	bgt.n	8002132 <UART_SetConfig+0x27e>
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <UART_SetConfig+0x25c>
 800210a:	2b02      	cmp	r3, #2
 800210c:	d005      	beq.n	800211a <UART_SetConfig+0x266>
 800210e:	e010      	b.n	8002132 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002110:	f7ff fabe 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8002114:	0003      	movs	r3, r0
 8002116:	61bb      	str	r3, [r7, #24]
        break;
 8002118:	e012      	b.n	8002140 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800211a:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <UART_SetConfig+0x30c>)
 800211c:	61bb      	str	r3, [r7, #24]
        break;
 800211e:	e00f      	b.n	8002140 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002120:	f7ff fa3a 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8002124:	0003      	movs	r3, r0
 8002126:	61bb      	str	r3, [r7, #24]
        break;
 8002128:	e00a      	b.n	8002140 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800212a:	2380      	movs	r3, #128	@ 0x80
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	61bb      	str	r3, [r7, #24]
        break;
 8002130:	e006      	b.n	8002140 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002136:	231e      	movs	r3, #30
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
        break;
 800213e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d01e      	beq.n	8002184 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	085a      	lsrs	r2, r3, #1
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	18d2      	adds	r2, r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0019      	movs	r1, r3
 8002156:	0010      	movs	r0, r2
 8002158:	f7fd ffd6 	bl	8000108 <__udivsi3>
 800215c:	0003      	movs	r3, r0
 800215e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	2b0f      	cmp	r3, #15
 8002164:	d90a      	bls.n	800217c <UART_SetConfig+0x2c8>
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	2380      	movs	r3, #128	@ 0x80
 800216a:	025b      	lsls	r3, r3, #9
 800216c:	429a      	cmp	r2, r3
 800216e:	d205      	bcs.n	800217c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	e003      	b.n	8002184 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800217c:	231e      	movs	r3, #30
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002190:	231e      	movs	r3, #30
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	781b      	ldrb	r3, [r3, #0]
}
 8002196:	0018      	movs	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	b008      	add	sp, #32
 800219c:	bd80      	pop	{r7, pc}
 800219e:	46c0      	nop			@ (mov r8, r8)
 80021a0:	efff69f3 	.word	0xefff69f3
 80021a4:	ffffcfff 	.word	0xffffcfff
 80021a8:	fffff4ff 	.word	0xfffff4ff
 80021ac:	40013800 	.word	0x40013800
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40004400 	.word	0x40004400
 80021b8:	40004800 	.word	0x40004800
 80021bc:	40004c00 	.word	0x40004c00
 80021c0:	007a1200 	.word	0x007a1200

080021c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	2208      	movs	r2, #8
 80021d2:	4013      	ands	r3, r2
 80021d4:	d00b      	beq.n	80021ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002308 <UART_AdvFeatureConfig+0x144>)
 80021de:	4013      	ands	r3, r2
 80021e0:	0019      	movs	r1, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f2:	2201      	movs	r2, #1
 80021f4:	4013      	ands	r3, r2
 80021f6:	d00b      	beq.n	8002210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a43      	ldr	r2, [pc, #268]	@ (800230c <UART_AdvFeatureConfig+0x148>)
 8002200:	4013      	ands	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	2202      	movs	r2, #2
 8002216:	4013      	ands	r3, r2
 8002218:	d00b      	beq.n	8002232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a3b      	ldr	r2, [pc, #236]	@ (8002310 <UART_AdvFeatureConfig+0x14c>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	2204      	movs	r2, #4
 8002238:	4013      	ands	r3, r2
 800223a:	d00b      	beq.n	8002254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4a34      	ldr	r2, [pc, #208]	@ (8002314 <UART_AdvFeatureConfig+0x150>)
 8002244:	4013      	ands	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	2210      	movs	r2, #16
 800225a:	4013      	ands	r3, r2
 800225c:	d00b      	beq.n	8002276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4a2c      	ldr	r2, [pc, #176]	@ (8002318 <UART_AdvFeatureConfig+0x154>)
 8002266:	4013      	ands	r3, r2
 8002268:	0019      	movs	r1, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	2220      	movs	r2, #32
 800227c:	4013      	ands	r3, r2
 800227e:	d00b      	beq.n	8002298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	4a25      	ldr	r2, [pc, #148]	@ (800231c <UART_AdvFeatureConfig+0x158>)
 8002288:	4013      	ands	r3, r2
 800228a:	0019      	movs	r1, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	2240      	movs	r2, #64	@ 0x40
 800229e:	4013      	ands	r3, r2
 80022a0:	d01d      	beq.n	80022de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002320 <UART_AdvFeatureConfig+0x15c>)
 80022aa:	4013      	ands	r3, r2
 80022ac:	0019      	movs	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022be:	2380      	movs	r3, #128	@ 0x80
 80022c0:	035b      	lsls	r3, r3, #13
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d10b      	bne.n	80022de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4a15      	ldr	r2, [pc, #84]	@ (8002324 <UART_AdvFeatureConfig+0x160>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	2280      	movs	r2, #128	@ 0x80
 80022e4:	4013      	ands	r3, r2
 80022e6:	d00b      	beq.n	8002300 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002328 <UART_AdvFeatureConfig+0x164>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]
  }
}
 8002300:	46c0      	nop			@ (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}
 8002308:	ffff7fff 	.word	0xffff7fff
 800230c:	fffdffff 	.word	0xfffdffff
 8002310:	fffeffff 	.word	0xfffeffff
 8002314:	fffbffff 	.word	0xfffbffff
 8002318:	ffffefff 	.word	0xffffefff
 800231c:	ffffdfff 	.word	0xffffdfff
 8002320:	ffefffff 	.word	0xffefffff
 8002324:	ff9fffff 	.word	0xff9fffff
 8002328:	fff7ffff 	.word	0xfff7ffff

0800232c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b092      	sub	sp, #72	@ 0x48
 8002330:	af02      	add	r7, sp, #8
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2284      	movs	r2, #132	@ 0x84
 8002338:	2100      	movs	r1, #0
 800233a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800233c:	f7fe fa5e 	bl	80007fc <HAL_GetTick>
 8002340:	0003      	movs	r3, r0
 8002342:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2208      	movs	r2, #8
 800234c:	4013      	ands	r3, r2
 800234e:	2b08      	cmp	r3, #8
 8002350:	d12c      	bne.n	80023ac <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002354:	2280      	movs	r2, #128	@ 0x80
 8002356:	0391      	lsls	r1, r2, #14
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	4a46      	ldr	r2, [pc, #280]	@ (8002474 <UART_CheckIdleState+0x148>)
 800235c:	9200      	str	r2, [sp, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	f000 f88c 	bl	800247c <UART_WaitOnFlagUntilTimeout>
 8002364:	1e03      	subs	r3, r0, #0
 8002366:	d021      	beq.n	80023ac <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002368:	f3ef 8310 	mrs	r3, PRIMASK
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002370:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002372:	2301      	movs	r3, #1
 8002374:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002378:	f383 8810 	msr	PRIMASK, r3
}
 800237c:	46c0      	nop			@ (mov r8, r8)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2180      	movs	r1, #128	@ 0x80
 800238a:	438a      	bics	r2, r1
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002394:	f383 8810 	msr	PRIMASK, r3
}
 8002398:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2220      	movs	r2, #32
 800239e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2278      	movs	r2, #120	@ 0x78
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e05f      	b.n	800246c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2204      	movs	r2, #4
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d146      	bne.n	8002448 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023bc:	2280      	movs	r2, #128	@ 0x80
 80023be:	03d1      	lsls	r1, r2, #15
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002474 <UART_CheckIdleState+0x148>)
 80023c4:	9200      	str	r2, [sp, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f000 f858 	bl	800247c <UART_WaitOnFlagUntilTimeout>
 80023cc:	1e03      	subs	r3, r0, #0
 80023ce:	d03b      	beq.n	8002448 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d0:	f3ef 8310 	mrs	r3, PRIMASK
 80023d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80023d6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80023da:	2301      	movs	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f383 8810 	msr	PRIMASK, r3
}
 80023e4:	46c0      	nop			@ (mov r8, r8)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4921      	ldr	r1, [pc, #132]	@ (8002478 <UART_CheckIdleState+0x14c>)
 80023f2:	400a      	ands	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f383 8810 	msr	PRIMASK, r3
}
 8002400:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002402:	f3ef 8310 	mrs	r3, PRIMASK
 8002406:	61bb      	str	r3, [r7, #24]
  return(result);
 8002408:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800240a:	633b      	str	r3, [r7, #48]	@ 0x30
 800240c:	2301      	movs	r3, #1
 800240e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f383 8810 	msr	PRIMASK, r3
}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2101      	movs	r1, #1
 8002424:	438a      	bics	r2, r1
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800242a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	f383 8810 	msr	PRIMASK, r3
}
 8002432:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2280      	movs	r2, #128	@ 0x80
 8002438:	2120      	movs	r1, #32
 800243a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2278      	movs	r2, #120	@ 0x78
 8002440:	2100      	movs	r1, #0
 8002442:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e011      	b.n	800246c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2280      	movs	r2, #128	@ 0x80
 8002452:	2120      	movs	r1, #32
 8002454:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2278      	movs	r2, #120	@ 0x78
 8002466:	2100      	movs	r1, #0
 8002468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b010      	add	sp, #64	@ 0x40
 8002472:	bd80      	pop	{r7, pc}
 8002474:	01ffffff 	.word	0x01ffffff
 8002478:	fffffedf 	.word	0xfffffedf

0800247c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	1dfb      	adds	r3, r7, #7
 800248a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248c:	e051      	b.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3301      	adds	r3, #1
 8002492:	d04e      	beq.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7fe f9b2 	bl	80007fc <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d302      	bcc.n	80024aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e051      	b.n	8002552 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2204      	movs	r2, #4
 80024b6:	4013      	ands	r3, r2
 80024b8:	d03b      	beq.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb6>
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b80      	cmp	r3, #128	@ 0x80
 80024be:	d038      	beq.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb6>
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	2b40      	cmp	r3, #64	@ 0x40
 80024c4:	d035      	beq.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2208      	movs	r2, #8
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d111      	bne.n	80024f8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2208      	movs	r2, #8
 80024da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	0018      	movs	r0, r3
 80024e0:	f000 f83c 	bl	800255c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2284      	movs	r2, #132	@ 0x84
 80024e8:	2108      	movs	r1, #8
 80024ea:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2278      	movs	r2, #120	@ 0x78
 80024f0:	2100      	movs	r1, #0
 80024f2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e02c      	b.n	8002552 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	2380      	movs	r3, #128	@ 0x80
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	401a      	ands	r2, r3
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	429a      	cmp	r2, r3
 800250a:	d112      	bne.n	8002532 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2280      	movs	r2, #128	@ 0x80
 8002512:	0112      	lsls	r2, r2, #4
 8002514:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 f81f 	bl	800255c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2284      	movs	r2, #132	@ 0x84
 8002522:	2120      	movs	r1, #32
 8002524:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2278      	movs	r2, #120	@ 0x78
 800252a:	2100      	movs	r1, #0
 800252c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e00f      	b.n	8002552 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	4013      	ands	r3, r2
 800253c:	68ba      	ldr	r2, [r7, #8]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	425a      	negs	r2, r3
 8002542:	4153      	adcs	r3, r2
 8002544:	b2db      	uxtb	r3, r3
 8002546:	001a      	movs	r2, r3
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d09e      	beq.n	800248e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	0018      	movs	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	b004      	add	sp, #16
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08e      	sub	sp, #56	@ 0x38
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002564:	f3ef 8310 	mrs	r3, PRIMASK
 8002568:	617b      	str	r3, [r7, #20]
  return(result);
 800256a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34
 800256e:	2301      	movs	r3, #1
 8002570:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f383 8810 	msr	PRIMASK, r3
}
 8002578:	46c0      	nop			@ (mov r8, r8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4926      	ldr	r1, [pc, #152]	@ (8002620 <UART_EndRxTransfer+0xc4>)
 8002586:	400a      	ands	r2, r1
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f383 8810 	msr	PRIMASK, r3
}
 8002594:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002596:	f3ef 8310 	mrs	r3, PRIMASK
 800259a:	623b      	str	r3, [r7, #32]
  return(result);
 800259c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
 80025a0:	2301      	movs	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	f383 8810 	msr	PRIMASK, r3
}
 80025aa:	46c0      	nop			@ (mov r8, r8)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2101      	movs	r1, #1
 80025b8:	438a      	bics	r2, r1
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c2:	f383 8810 	msr	PRIMASK, r3
}
 80025c6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d118      	bne.n	8002602 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d0:	f3ef 8310 	mrs	r3, PRIMASK
 80025d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80025d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025da:	2301      	movs	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f383 8810 	msr	PRIMASK, r3
}
 80025e4:	46c0      	nop			@ (mov r8, r8)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2110      	movs	r1, #16
 80025f2:	438a      	bics	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	f383 8810 	msr	PRIMASK, r3
}
 8002600:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2280      	movs	r2, #128	@ 0x80
 8002606:	2120      	movs	r1, #32
 8002608:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b00e      	add	sp, #56	@ 0x38
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	fffffedf 	.word	0xfffffedf

08002624 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3308      	adds	r3, #8
 8002630:	001a      	movs	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	4252      	negs	r2, r2
 800263c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3308      	adds	r3, #8
 8002642:	001a      	movs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3308      	adds	r3, #8
 800264c:	001a      	movs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002658:	46c0      	nop			@ (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}

08002660 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	46bd      	mov	sp, r7
 8002672:	b002      	add	sp, #8
 8002674:	bd80      	pop	{r7, pc}

08002676 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	3301      	adds	r3, #1
 800268a:	d103      	bne.n	8002694 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	e00c      	b.n	80026ae <vListInsert+0x38>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3308      	adds	r3, #8
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	e002      	b.n	80026a2 <vListInsert+0x2c>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d2f6      	bcs.n	800269c <vListInsert+0x26>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	601a      	str	r2, [r3, #0]
}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	46bd      	mov	sp, r7
 80026de:	b004      	add	sp, #16
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b084      	sub	sp, #16
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6852      	ldr	r2, [r2, #4]
 8002702:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d103      	bne.n	8002716 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	1e5a      	subs	r2, r3, #1
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
}
 800272a:	0018      	movs	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	b004      	add	sp, #16
 8002730:	bd80      	pop	{r7, pc}

08002732 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002732:	b5b0      	push	{r4, r5, r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800273c:	2301      	movs	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <xQueueGenericReset+0x1e>
 800274a:	b672      	cpsid	i
 800274c:	46c0      	nop			@ (mov r8, r8)
 800274e:	e7fd      	b.n	800274c <xQueueGenericReset+0x1a>

    if( ( pxQueue != NULL ) &&
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d100      	bne.n	8002758 <xQueueGenericReset+0x26>
 8002756:	e06a      	b.n	800282e <xQueueGenericReset+0xfc>
        ( pxQueue->uxLength >= 1U ) &&
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d066      	beq.n	800282e <xQueueGenericReset+0xfc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002768:	2400      	movs	r4, #0
 800276a:	0c15      	lsrs	r5, r2, #16
 800276c:	0c19      	lsrs	r1, r3, #16
 800276e:	b2a8      	uxth	r0, r5
 8002770:	2800      	cmp	r0, #0
 8002772:	d104      	bne.n	800277e <xQueueGenericReset+0x4c>
 8002774:	b288      	uxth	r0, r1
 8002776:	2800      	cmp	r0, #0
 8002778:	d013      	beq.n	80027a2 <xQueueGenericReset+0x70>
 800277a:	1c10      	adds	r0, r2, #0
 800277c:	e004      	b.n	8002788 <xQueueGenericReset+0x56>
 800277e:	b289      	uxth	r1, r1
 8002780:	2900      	cmp	r1, #0
 8002782:	d10d      	bne.n	80027a0 <xQueueGenericReset+0x6e>
 8002784:	1c29      	adds	r1, r5, #0
 8002786:	1c18      	adds	r0, r3, #0
 8002788:	b292      	uxth	r2, r2
 800278a:	b29b      	uxth	r3, r3
 800278c:	435a      	muls	r2, r3
 800278e:	b283      	uxth	r3, r0
 8002790:	b289      	uxth	r1, r1
 8002792:	434b      	muls	r3, r1
 8002794:	0c12      	lsrs	r2, r2, #16
 8002796:	189b      	adds	r3, r3, r2
 8002798:	141b      	asrs	r3, r3, #16
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d000      	beq.n	80027a2 <xQueueGenericReset+0x70>
 80027a0:	2401      	movs	r4, #1
 80027a2:	1e23      	subs	r3, r4, #0
        ( pxQueue->uxLength >= 1U ) &&
 80027a4:	d143      	bne.n	800282e <xQueueGenericReset+0xfc>
    {
        taskENTER_CRITICAL();
 80027a6:	f001 febb 	bl	8004520 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	434b      	muls	r3, r1
 80027b8:	18d2      	adds	r2, r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d4:	1e59      	subs	r1, r3, #1
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	434b      	muls	r3, r1
 80027dc:	18d2      	adds	r2, r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2244      	movs	r2, #68	@ 0x44
 80027e6:	21ff      	movs	r1, #255	@ 0xff
 80027e8:	5499      	strb	r1, [r3, r2]
            pxQueue->cTxLock = queueUNLOCKED;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2245      	movs	r2, #69	@ 0x45
 80027ee:	21ff      	movs	r1, #255	@ 0xff
 80027f0:	5499      	strb	r1, [r3, r2]

            if( xNewQueue == pdFALSE )
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10d      	bne.n	8002814 <xQueueGenericReset+0xe2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d013      	beq.n	8002828 <xQueueGenericReset+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	3310      	adds	r3, #16
 8002804:	0018      	movs	r0, r3
 8002806:	f001 f87f 	bl	8003908 <xTaskRemoveFromEventList>
 800280a:	1e03      	subs	r3, r0, #0
 800280c:	d00c      	beq.n	8002828 <xQueueGenericReset+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800280e:	f001 fe77 	bl	8004500 <vPortYield>
 8002812:	e009      	b.n	8002828 <xQueueGenericReset+0xf6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3310      	adds	r3, #16
 8002818:	0018      	movs	r0, r3
 800281a:	f7ff ff03 	bl	8002624 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3324      	adds	r3, #36	@ 0x24
 8002822:	0018      	movs	r0, r3
 8002824:	f7ff fefe 	bl	8002624 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002828:	f001 fe8c 	bl	8004544 <vPortExitCritical>
 800282c:	e001      	b.n	8002832 <xQueueGenericReset+0x100>
    }
    else
    {
        xReturn = pdFAIL;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <xQueueGenericReset+0x10c>
 8002838:	b672      	cpsid	i
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	e7fd      	b.n	800283a <xQueueGenericReset+0x108>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800283e:	68fb      	ldr	r3, [r7, #12]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b004      	add	sp, #16
 8002846:	bdb0      	pop	{r4, r5, r7, pc}

08002848 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284a:	b08b      	sub	sp, #44	@ 0x2c
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	1dfb      	adds	r3, r7, #7
 8002854:	701a      	strb	r2, [r3, #0]
        Queue_t * pxNewQueue = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d047      	beq.n	80028f0 <xQueueGenericCreate+0xa8>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002860:	2000      	movs	r0, #0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	0c19      	lsrs	r1, r3, #16
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1c1e      	adds	r6, r3, #0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	1c15      	adds	r5, r2, #0
 8002872:	b28a      	uxth	r2, r1
 8002874:	2a00      	cmp	r2, #0
 8002876:	d105      	bne.n	8002884 <xQueueGenericCreate+0x3c>
 8002878:	b29a      	uxth	r2, r3
 800287a:	2a00      	cmp	r2, #0
 800287c:	d013      	beq.n	80028a6 <xQueueGenericCreate+0x5e>
 800287e:	1c19      	adds	r1, r3, #0
 8002880:	1c34      	adds	r4, r6, #0
 8002882:	e003      	b.n	800288c <xQueueGenericCreate+0x44>
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <xQueueGenericCreate+0x5c>
 800288a:	1c2c      	adds	r4, r5, #0
 800288c:	b2b3      	uxth	r3, r6
 800288e:	b2aa      	uxth	r2, r5
 8002890:	435a      	muls	r2, r3
 8002892:	b2a3      	uxth	r3, r4
 8002894:	b289      	uxth	r1, r1
 8002896:	434b      	muls	r3, r1
 8002898:	0c12      	lsrs	r2, r2, #16
 800289a:	189b      	adds	r3, r3, r2
 800289c:	141b      	asrs	r3, r3, #16
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d000      	beq.n	80028a6 <xQueueGenericCreate+0x5e>
 80028a4:	2001      	movs	r0, #1
 80028a6:	1e03      	subs	r3, r0, #0
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80028a8:	d122      	bne.n	80028f0 <xQueueGenericCreate+0xa8>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	4353      	muls	r3, r2
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80028b0:	3351      	adds	r3, #81	@ 0x51
 80028b2:	d81d      	bhi.n	80028f0 <xQueueGenericCreate+0xa8>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	4353      	muls	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	3350      	adds	r3, #80	@ 0x50
 80028c0:	0018      	movs	r0, r3
 80028c2:	f001 febd 	bl	8004640 <pvPortMalloc>
 80028c6:	0003      	movs	r3, r0
 80028c8:	61fb      	str	r3, [r7, #28]

            if( pxNewQueue != NULL )
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d015      	beq.n	80028fc <xQueueGenericCreate+0xb4>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3350      	adds	r3, #80	@ 0x50
 80028d8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028da:	1dfb      	adds	r3, r7, #7
 80028dc:	781c      	ldrb	r4, [r3, #0]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	0023      	movs	r3, r4
 80028ea:	f000 f80c 	bl	8002906 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80028ee:	e005      	b.n	80028fc <xQueueGenericCreate+0xb4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <xQueueGenericCreate+0xb4>
 80028f6:	b672      	cpsid	i
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	e7fd      	b.n	80028f8 <xQueueGenericCreate+0xb0>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80028fc:	69fb      	ldr	r3, [r7, #28]
    }
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b009      	add	sp, #36	@ 0x24
 8002904:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002906 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	001a      	movs	r2, r3
 8002914:	1cfb      	adds	r3, r7, #3
 8002916:	701a      	strb	r2, [r3, #0]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <prvInitialiseNewQueue+0x20>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e002      	b.n	800292c <prvInitialiseNewQueue+0x26>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2101      	movs	r1, #1
 800293c:	0018      	movs	r0, r3
 800293e:	f7ff fef8 	bl	8002732 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1cfa      	adds	r2, r7, #3
 8002946:	214c      	movs	r1, #76	@ 0x4c
 8002948:	7812      	ldrb	r2, [r2, #0]
 800294a:	545a      	strb	r2, [r3, r1]
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800294c:	46c0      	nop			@ (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b004      	add	sp, #16
 8002952:	bd80      	pop	{r7, pc}

08002954 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	@ 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <xQueueGenericSend+0x22>
 8002970:	b672      	cpsid	i
 8002972:	46c0      	nop			@ (mov r8, r8)
 8002974:	e7fd      	b.n	8002972 <xQueueGenericSend+0x1e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <xQueueGenericSend+0x30>
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <xQueueGenericSend+0x34>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <xQueueGenericSend+0x36>
 8002988:	2300      	movs	r3, #0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <xQueueGenericSend+0x40>
 800298e:	b672      	cpsid	i
 8002990:	46c0      	nop			@ (mov r8, r8)
 8002992:	e7fd      	b.n	8002990 <xQueueGenericSend+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d103      	bne.n	80029a2 <xQueueGenericSend+0x4e>
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <xQueueGenericSend+0x52>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <xQueueGenericSend+0x54>
 80029a6:	2300      	movs	r3, #0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <xQueueGenericSend+0x5e>
 80029ac:	b672      	cpsid	i
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	e7fd      	b.n	80029ae <xQueueGenericSend+0x5a>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029b2:	f001 f997 	bl	8003ce4 <xTaskGetSchedulerState>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d102      	bne.n	80029c0 <xQueueGenericSend+0x6c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <xQueueGenericSend+0x70>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <xQueueGenericSend+0x72>
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <xQueueGenericSend+0x7c>
 80029ca:	b672      	cpsid	i
 80029cc:	46c0      	nop			@ (mov r8, r8)
 80029ce:	e7fd      	b.n	80029cc <xQueueGenericSend+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80029d0:	f001 fda6 	bl	8004520 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029dc:	429a      	cmp	r2, r3
 80029de:	d302      	bcc.n	80029e6 <xQueueGenericSend+0x92>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d11e      	bne.n	8002a24 <xQueueGenericSend+0xd0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 f931 	bl	8002c54 <prvCopyDataToQueue>
 80029f2:	0003      	movs	r3, r0
 80029f4:	61fb      	str	r3, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <xQueueGenericSend+0xbe>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	3324      	adds	r3, #36	@ 0x24
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 ff80 	bl	8003908 <xTaskRemoveFromEventList>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d007      	beq.n	8002a1c <xQueueGenericSend+0xc8>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002a0c:	f001 fd78 	bl	8004500 <vPortYield>
 8002a10:	e004      	b.n	8002a1c <xQueueGenericSend+0xc8>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <xQueueGenericSend+0xc8>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002a18:	f001 fd72 	bl	8004500 <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002a1c:	f001 fd92 	bl	8004544 <vPortExitCritical>
                return pdPASS;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e05b      	b.n	8002adc <xQueueGenericSend+0x188>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <xQueueGenericSend+0xde>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002a2a:	f001 fd8b 	bl	8004544 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e054      	b.n	8002adc <xQueueGenericSend+0x188>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d106      	bne.n	8002a46 <xQueueGenericSend+0xf2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a38:	2314      	movs	r3, #20
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f001 f82f 	bl	8003aa0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002a46:	f001 fd7d 	bl	8004544 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002a4a:	f000 fc9b 	bl	8003384 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a4e:	f001 fd67 	bl	8004520 <vPortEnterCritical>
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	2244      	movs	r2, #68	@ 0x44
 8002a56:	5c9b      	ldrb	r3, [r3, r2]
 8002a58:	b25b      	sxtb	r3, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	d103      	bne.n	8002a66 <xQueueGenericSend+0x112>
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	2244      	movs	r2, #68	@ 0x44
 8002a62:	2100      	movs	r1, #0
 8002a64:	5499      	strb	r1, [r3, r2]
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	2245      	movs	r2, #69	@ 0x45
 8002a6a:	5c9b      	ldrb	r3, [r3, r2]
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	d103      	bne.n	8002a7a <xQueueGenericSend+0x126>
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	2245      	movs	r2, #69	@ 0x45
 8002a76:	2100      	movs	r1, #0
 8002a78:	5499      	strb	r1, [r3, r2]
 8002a7a:	f001 fd63 	bl	8004544 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a7e:	1d3a      	adds	r2, r7, #4
 8002a80:	2314      	movs	r3, #20
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	0011      	movs	r1, r2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f001 f81e 	bl	8003ac8 <xTaskCheckForTimeOut>
 8002a8c:	1e03      	subs	r3, r0, #0
 8002a8e:	d11e      	bne.n	8002ace <xQueueGenericSend+0x17a>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 f9e3 	bl	8002e5e <prvIsQueueFull>
 8002a98:	1e03      	subs	r3, r0, #0
 8002a9a:	d011      	beq.n	8002ac0 <xQueueGenericSend+0x16c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	3310      	adds	r3, #16
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	0011      	movs	r1, r2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 fecf 	bl	8003848 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 f962 	bl	8002d76 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002ab2:	f000 fc73 	bl	800339c <xTaskResumeAll>
 8002ab6:	1e03      	subs	r3, r0, #0
 8002ab8:	d18a      	bne.n	80029d0 <xQueueGenericSend+0x7c>
                {
                    portYIELD_WITHIN_API();
 8002aba:	f001 fd21 	bl	8004500 <vPortYield>
 8002abe:	e787      	b.n	80029d0 <xQueueGenericSend+0x7c>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f000 f957 	bl	8002d76 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ac8:	f000 fc68 	bl	800339c <xTaskResumeAll>
 8002acc:	e780      	b.n	80029d0 <xQueueGenericSend+0x7c>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 f950 	bl	8002d76 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ad6:	f000 fc61 	bl	800339c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002ada:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b00a      	add	sp, #40	@ 0x28
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	@ 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <xQueueReceive+0x20>
 8002afe:	b672      	cpsid	i
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	e7fd      	b.n	8002b00 <xQueueReceive+0x1c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d103      	bne.n	8002b12 <xQueueReceive+0x2e>
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <xQueueReceive+0x32>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <xQueueReceive+0x34>
 8002b16:	2300      	movs	r3, #0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <xQueueReceive+0x3e>
 8002b1c:	b672      	cpsid	i
 8002b1e:	46c0      	nop			@ (mov r8, r8)
 8002b20:	e7fd      	b.n	8002b1e <xQueueReceive+0x3a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b22:	f001 f8df 	bl	8003ce4 <xTaskGetSchedulerState>
 8002b26:	1e03      	subs	r3, r0, #0
 8002b28:	d102      	bne.n	8002b30 <xQueueReceive+0x4c>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <xQueueReceive+0x50>
 8002b30:	2301      	movs	r3, #1
 8002b32:	e000      	b.n	8002b36 <xQueueReceive+0x52>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d102      	bne.n	8002b40 <xQueueReceive+0x5c>
 8002b3a:	b672      	cpsid	i
 8002b3c:	46c0      	nop			@ (mov r8, r8)
 8002b3e:	e7fd      	b.n	8002b3c <xQueueReceive+0x58>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b40:	f001 fcee 	bl	8004520 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b48:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01a      	beq.n	8002b86 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	0011      	movs	r1, r2
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 f8e7 	bl	8002d2a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	1e5a      	subs	r2, r3, #1
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	3310      	adds	r3, #16
 8002b70:	0018      	movs	r0, r3
 8002b72:	f000 fec9 	bl	8003908 <xTaskRemoveFromEventList>
 8002b76:	1e03      	subs	r3, r0, #0
 8002b78:	d001      	beq.n	8002b7e <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b7a:	f001 fcc1 	bl	8004500 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b7e:	f001 fce1 	bl	8004544 <vPortExitCritical>
                return pdPASS;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e062      	b.n	8002c4c <xQueueReceive+0x168>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d103      	bne.n	8002b94 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b8c:	f001 fcda 	bl	8004544 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e05b      	b.n	8002c4c <xQueueReceive+0x168>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b9a:	2314      	movs	r3, #20
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 ff7e 	bl	8003aa0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ba8:	f001 fccc 	bl	8004544 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bac:	f000 fbea 	bl	8003384 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bb0:	f001 fcb6 	bl	8004520 <vPortEnterCritical>
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	2244      	movs	r2, #68	@ 0x44
 8002bb8:	5c9b      	ldrb	r3, [r3, r2]
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	d103      	bne.n	8002bc8 <xQueueReceive+0xe4>
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	2244      	movs	r2, #68	@ 0x44
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	5499      	strb	r1, [r3, r2]
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2245      	movs	r2, #69	@ 0x45
 8002bcc:	5c9b      	ldrb	r3, [r3, r2]
 8002bce:	b25b      	sxtb	r3, r3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	d103      	bne.n	8002bdc <xQueueReceive+0xf8>
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	2245      	movs	r2, #69	@ 0x45
 8002bd8:	2100      	movs	r1, #0
 8002bda:	5499      	strb	r1, [r3, r2]
 8002bdc:	f001 fcb2 	bl	8004544 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002be0:	1d3a      	adds	r2, r7, #4
 8002be2:	2314      	movs	r3, #20
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	0011      	movs	r1, r2
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 ff6d 	bl	8003ac8 <xTaskCheckForTimeOut>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d11e      	bne.n	8002c30 <xQueueReceive+0x14c>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 f91c 	bl	8002e32 <prvIsQueueEmpty>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d011      	beq.n	8002c22 <xQueueReceive+0x13e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	3324      	adds	r3, #36	@ 0x24
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	0011      	movs	r1, r2
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 fe1e 	bl	8003848 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	0018      	movs	r0, r3
 8002c10:	f000 f8b1 	bl	8002d76 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c14:	f000 fbc2 	bl	800339c <xTaskResumeAll>
 8002c18:	1e03      	subs	r3, r0, #0
 8002c1a:	d191      	bne.n	8002b40 <xQueueReceive+0x5c>
                {
                    portYIELD_WITHIN_API();
 8002c1c:	f001 fc70 	bl	8004500 <vPortYield>
 8002c20:	e78e      	b.n	8002b40 <xQueueReceive+0x5c>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f8a6 	bl	8002d76 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c2a:	f000 fbb7 	bl	800339c <xTaskResumeAll>
 8002c2e:	e787      	b.n	8002b40 <xQueueReceive+0x5c>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f000 f89f 	bl	8002d76 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c38:	f000 fbb0 	bl	800339c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f000 f8f7 	bl	8002e32 <prvIsQueueEmpty>
 8002c44:	1e03      	subs	r3, r0, #0
 8002c46:	d100      	bne.n	8002c4a <xQueueReceive+0x166>
 8002c48:	e77a      	b.n	8002b40 <xQueueReceive+0x5c>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002c4a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b00a      	add	sp, #40	@ 0x28
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c68:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10e      	bne.n	8002c90 <prvCopyDataToQueue+0x3c>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d14e      	bne.n	8002d18 <prvCopyDataToQueue+0xc4>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f001 f84c 	bl	8003d1c <xTaskPriorityDisinherit>
 8002c84:	0003      	movs	r3, r0
 8002c86:	617b      	str	r3, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	e043      	b.n	8002d18 <prvCopyDataToQueue+0xc4>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d119      	bne.n	8002cca <prvCopyDataToQueue+0x76>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6858      	ldr	r0, [r3, #4]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	f001 fea7 	bl	80049f4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cae:	18d2      	adds	r2, r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d32b      	bcc.n	8002d18 <prvCopyDataToQueue+0xc4>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	e026      	b.n	8002d18 <prvCopyDataToQueue+0xc4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	68d8      	ldr	r0, [r3, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	f001 fe8d 	bl	80049f4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	425b      	negs	r3, r3
 8002ce4:	18d2      	adds	r2, r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d207      	bcs.n	8002d06 <prvCopyDataToQueue+0xb2>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	425b      	negs	r3, r3
 8002d00:	18d2      	adds	r2, r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d105      	bne.n	8002d18 <prvCopyDataToQueue+0xc4>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <prvCopyDataToQueue+0xc4>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002d20:	697b      	ldr	r3, [r7, #20]
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b006      	add	sp, #24
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d018      	beq.n	8002d6e <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	18d2      	adds	r2, r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d303      	bcc.n	8002d5e <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68d9      	ldr	r1, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f001 fe43 	bl	80049f4 <memcpy>
    }
}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b002      	add	sp, #8
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d7e:	f001 fbcf 	bl	8004520 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d82:	230f      	movs	r3, #15
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	2145      	movs	r1, #69	@ 0x45
 8002d8a:	5c52      	ldrb	r2, [r2, r1]
 8002d8c:	701a      	strb	r2, [r3, #0]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d8e:	e013      	b.n	8002db8 <prvUnlockQueue+0x42>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d016      	beq.n	8002dc6 <prvUnlockQueue+0x50>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3324      	adds	r3, #36	@ 0x24
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f000 fdb3 	bl	8003908 <xTaskRemoveFromEventList>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d001      	beq.n	8002daa <prvUnlockQueue+0x34>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002da6:	f000 fee5 	bl	8003b74 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002daa:	210f      	movs	r1, #15
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	701a      	strb	r2, [r3, #0]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002db8:	230f      	movs	r3, #15
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b25b      	sxtb	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	dce5      	bgt.n	8002d90 <prvUnlockQueue+0x1a>
 8002dc4:	e000      	b.n	8002dc8 <prvUnlockQueue+0x52>
                    break;
 8002dc6:	46c0      	nop			@ (mov r8, r8)
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2245      	movs	r2, #69	@ 0x45
 8002dcc:	21ff      	movs	r1, #255	@ 0xff
 8002dce:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002dd0:	f001 fbb8 	bl	8004544 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002dd4:	f001 fba4 	bl	8004520 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002dd8:	230e      	movs	r3, #14
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	2144      	movs	r1, #68	@ 0x44
 8002de0:	5c52      	ldrb	r2, [r2, r1]
 8002de2:	701a      	strb	r2, [r3, #0]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002de4:	e013      	b.n	8002e0e <prvUnlockQueue+0x98>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <prvUnlockQueue+0xa6>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3310      	adds	r3, #16
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 fd88 	bl	8003908 <xTaskRemoveFromEventList>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d001      	beq.n	8002e00 <prvUnlockQueue+0x8a>
                {
                    vTaskMissedYield();
 8002dfc:	f000 feba 	bl	8003b74 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e00:	210e      	movs	r1, #14
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b2da      	uxtb	r2, r3
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	701a      	strb	r2, [r3, #0]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e0e:	230e      	movs	r3, #14
 8002e10:	18fb      	adds	r3, r7, r3
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	dce5      	bgt.n	8002de6 <prvUnlockQueue+0x70>
 8002e1a:	e000      	b.n	8002e1e <prvUnlockQueue+0xa8>
            }
            else
            {
                break;
 8002e1c:	46c0      	nop			@ (mov r8, r8)
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2244      	movs	r2, #68	@ 0x44
 8002e22:	21ff      	movs	r1, #255	@ 0xff
 8002e24:	5499      	strb	r1, [r3, r2]
    }
    taskEXIT_CRITICAL();
 8002e26:	f001 fb8d 	bl	8004544 <vPortExitCritical>
}
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b004      	add	sp, #16
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e3a:	f001 fb71 	bl	8004520 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e46:	2301      	movs	r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	e001      	b.n	8002e50 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e50:	f001 fb78 	bl	8004544 <vPortExitCritical>

    return xReturn;
 8002e54:	68fb      	ldr	r3, [r7, #12]
}
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b004      	add	sp, #16
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e66:	f001 fb5b 	bl	8004520 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d102      	bne.n	8002e7c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e76:	2301      	movs	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e001      	b.n	8002e80 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e80:	f001 fb60 	bl	8004544 <vPortExitCritical>

    return xReturn;
 8002e84:	68fb      	ldr	r3, [r7, #12]
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b004      	add	sp, #16
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <vQueueAddToRegistry+0x1a>
 8002ea4:	b672      	cpsid	i
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	e7fd      	b.n	8002ea6 <vQueueAddToRegistry+0x16>

        if( pcQueueName != NULL )
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d025      	beq.n	8002efc <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e01f      	b.n	8002ef6 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002eb6:	4a18      	ldr	r2, [pc, #96]	@ (8002f18 <vQueueAddToRegistry+0x88>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	18d3      	adds	r3, r2, r3
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d105      	bne.n	8002ed4 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	00da      	lsls	r2, r3, #3
 8002ecc:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <vQueueAddToRegistry+0x88>)
 8002ece:	18d3      	adds	r3, r2, r3
 8002ed0:	60bb      	str	r3, [r7, #8]
                    break;
 8002ed2:	e013      	b.n	8002efc <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10a      	bne.n	8002ef0 <vQueueAddToRegistry+0x60>
 8002eda:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <vQueueAddToRegistry+0x88>)
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	00d2      	lsls	r2, r2, #3
 8002ee0:	58d3      	ldr	r3, [r2, r3]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d104      	bne.n	8002ef0 <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	00da      	lsls	r2, r3, #3
 8002eea:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <vQueueAddToRegistry+0x88>)
 8002eec:	18d3      	adds	r3, r2, r3
 8002eee:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b07      	cmp	r3, #7
 8002efa:	d9dc      	bls.n	8002eb6 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d005      	beq.n	8002f0e <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002f0e:	46c0      	nop			@ (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	20000108 	.word	0x20000108

08002f1c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f2c:	f001 faf8 	bl	8004520 <vPortEnterCritical>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2244      	movs	r2, #68	@ 0x44
 8002f34:	5c9b      	ldrb	r3, [r3, r2]
 8002f36:	b25b      	sxtb	r3, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	d103      	bne.n	8002f44 <vQueueWaitForMessageRestricted+0x28>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2244      	movs	r2, #68	@ 0x44
 8002f40:	2100      	movs	r1, #0
 8002f42:	5499      	strb	r1, [r3, r2]
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2245      	movs	r2, #69	@ 0x45
 8002f48:	5c9b      	ldrb	r3, [r3, r2]
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	d103      	bne.n	8002f58 <vQueueWaitForMessageRestricted+0x3c>
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	2245      	movs	r2, #69	@ 0x45
 8002f54:	2100      	movs	r1, #0
 8002f56:	5499      	strb	r1, [r3, r2]
 8002f58:	f001 faf4 	bl	8004544 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d106      	bne.n	8002f72 <vQueueWaitForMessageRestricted+0x56>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3324      	adds	r3, #36	@ 0x24
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68b9      	ldr	r1, [r7, #8]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f000 fc8b 	bl	8003888 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7ff fefe 	bl	8002d76 <prvUnlockQueue>
    }
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b006      	add	sp, #24
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f82:	b590      	push	{r4, r7, lr}
 8002f84:	b08d      	sub	sp, #52	@ 0x34
 8002f86:	af04      	add	r7, sp, #16
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	1dbb      	adds	r3, r7, #6
 8002f90:	801a      	strh	r2, [r3, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f92:	1dbb      	adds	r3, r7, #6
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f001 fb51 	bl	8004640 <pvPortMalloc>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	617b      	str	r3, [r7, #20]

            if( pxStack != NULL )
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d016      	beq.n	8002fd6 <xTaskCreate+0x54>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002fa8:	2054      	movs	r0, #84	@ 0x54
 8002faa:	f001 fb49 	bl	8004640 <pvPortMalloc>
 8002fae:	0003      	movs	r3, r0
 8002fb0:	61fb      	str	r3, [r7, #28]

                if( pxNewTCB != NULL )
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <xTaskCreate+0x4a>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	2254      	movs	r2, #84	@ 0x54
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f001 fcec 	bl	800499c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fca:	e006      	b.n	8002fda <xTaskCreate+0x58>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f001 fbe4 	bl	800479c <vPortFree>
 8002fd4:	e001      	b.n	8002fda <xTaskCreate+0x58>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d016      	beq.n	800300e <xTaskCreate+0x8c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fe0:	1dbb      	adds	r3, r7, #6
 8002fe2:	881a      	ldrh	r2, [r3, #0]
 8002fe4:	683c      	ldr	r4, [r7, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	2300      	movs	r3, #0
 8002fec:	9303      	str	r3, [sp, #12]
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	9302      	str	r3, [sp, #8]
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	0023      	movs	r3, r4
 8002ffc:	f000 f810 	bl	8003020 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	0018      	movs	r0, r3
 8003004:	f000 f88e 	bl	8003124 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003008:	2301      	movs	r3, #1
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	e002      	b.n	8003014 <xTaskCreate+0x92>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800300e:	2301      	movs	r3, #1
 8003010:	425b      	negs	r3, r3
 8003012:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003014:	69bb      	ldr	r3, [r7, #24]
    }
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b009      	add	sp, #36	@ 0x24
 800301c:	bd90      	pop	{r4, r7, pc}
	...

08003020 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	001a      	movs	r2, r3
 8003038:	21a5      	movs	r1, #165	@ 0xa5
 800303a:	f001 fcaf 	bl	800499c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4936      	ldr	r1, [pc, #216]	@ (8003120 <prvInitialiseNewTask+0x100>)
 8003046:	468c      	mov	ip, r1
 8003048:	4463      	add	r3, ip
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	18d3      	adds	r3, r2, r3
 800304e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	2207      	movs	r2, #7
 8003054:	4393      	bics	r3, r2
 8003056:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2207      	movs	r2, #7
 800305c:	4013      	ands	r3, r2
 800305e:	d002      	beq.n	8003066 <prvInitialiseNewTask+0x46>
 8003060:	b672      	cpsid	i
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	e7fd      	b.n	8003062 <prvInitialiseNewTask+0x42>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01f      	beq.n	80030ac <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e013      	b.n	800309a <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	18d3      	adds	r3, r2, r3
 8003078:	7818      	ldrb	r0, [r3, #0]
 800307a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800307c:	2134      	movs	r1, #52	@ 0x34
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	18d3      	adds	r3, r2, r3
 8003082:	185b      	adds	r3, r3, r1
 8003084:	1c02      	adds	r2, r0, #0
 8003086:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	18d3      	adds	r3, r2, r3
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d006      	beq.n	80030a2 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3301      	adds	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b04      	cmp	r3, #4
 800309e:	d9e8      	bls.n	8003072 <prvInitialiseNewTask+0x52>
 80030a0:	e000      	b.n	80030a4 <prvInitialiseNewTask+0x84>
            {
                break;
 80030a2:	46c0      	nop			@ (mov r8, r8)
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a6:	2238      	movs	r2, #56	@ 0x38
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d902      	bls.n	80030b8 <prvInitialiseNewTask+0x98>
 80030b2:	b672      	cpsid	i
 80030b4:	46c0      	nop			@ (mov r8, r8)
 80030b6:	e7fd      	b.n	80030b4 <prvInitialiseNewTask+0x94>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d901      	bls.n	80030c2 <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80030be:	2304      	movs	r3, #4
 80030c0:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80030c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c4:	6a3a      	ldr	r2, [r7, #32]
 80030c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80030c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ca:	6a3a      	ldr	r2, [r7, #32]
 80030cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d0:	3304      	adds	r3, #4
 80030d2:	0018      	movs	r0, r3
 80030d4:	f7ff fac4 	bl	8002660 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030da:	3318      	adds	r3, #24
 80030dc:	0018      	movs	r0, r3
 80030de:	f7ff fabf 	bl	8002660 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030e6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	2205      	movs	r2, #5
 80030ec:	1ad2      	subs	r2, r2, r3
 80030ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030f6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	0018      	movs	r0, r3
 8003100:	f001 f970 	bl	80043e4 <pxPortInitialiseStack>
 8003104:	0002      	movs	r2, r0
 8003106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003108:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <prvInitialiseNewTask+0xf6>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003114:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003116:	46c0      	nop			@ (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	b006      	add	sp, #24
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	3fffffff 	.word	0x3fffffff

08003124 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800312c:	f001 f9f8 	bl	8004520 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003130:	4b3d      	ldr	r3, [pc, #244]	@ (8003228 <prvAddNewTaskToReadyList+0x104>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	4b3c      	ldr	r3, [pc, #240]	@ (8003228 <prvAddNewTaskToReadyList+0x104>)
 8003138:	601a      	str	r2, [r3, #0]

        if( pxCurrentTCB == NULL )
 800313a:	4b3c      	ldr	r3, [pc, #240]	@ (800322c <prvAddNewTaskToReadyList+0x108>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003142:	4b3a      	ldr	r3, [pc, #232]	@ (800322c <prvAddNewTaskToReadyList+0x108>)
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	601a      	str	r2, [r3, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003148:	4b37      	ldr	r3, [pc, #220]	@ (8003228 <prvAddNewTaskToReadyList+0x104>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d110      	bne.n	8003172 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003150:	f000 fd2a 	bl	8003ba8 <prvInitialiseTaskLists>
 8003154:	e00d      	b.n	8003172 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003156:	4b36      	ldr	r3, [pc, #216]	@ (8003230 <prvAddNewTaskToReadyList+0x10c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800315e:	4b33      	ldr	r3, [pc, #204]	@ (800322c <prvAddNewTaskToReadyList+0x108>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003168:	429a      	cmp	r2, r3
 800316a:	d802      	bhi.n	8003172 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800316c:	4b2f      	ldr	r3, [pc, #188]	@ (800322c <prvAddNewTaskToReadyList+0x108>)
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	601a      	str	r2, [r3, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003172:	4b30      	ldr	r3, [pc, #192]	@ (8003234 <prvAddNewTaskToReadyList+0x110>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	4b2e      	ldr	r3, [pc, #184]	@ (8003234 <prvAddNewTaskToReadyList+0x110>)
 800317a:	601a      	str	r2, [r3, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800317c:	4b2d      	ldr	r3, [pc, #180]	@ (8003234 <prvAddNewTaskToReadyList+0x110>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003188:	4b2b      	ldr	r3, [pc, #172]	@ (8003238 <prvAddNewTaskToReadyList+0x114>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d903      	bls.n	8003198 <prvAddNewTaskToReadyList+0x74>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003194:	4b28      	ldr	r3, [pc, #160]	@ (8003238 <prvAddNewTaskToReadyList+0x114>)
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800319c:	4927      	ldr	r1, [pc, #156]	@ (800323c <prvAddNewTaskToReadyList+0x118>)
 800319e:	0013      	movs	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	18cb      	adds	r3, r1, r3
 80031a8:	3304      	adds	r3, #4
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	60da      	str	r2, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	3204      	adds	r2, #4
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	1d1a      	adds	r2, r3, #4
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d2:	0013      	movs	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	189b      	adds	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4a18      	ldr	r2, [pc, #96]	@ (800323c <prvAddNewTaskToReadyList+0x118>)
 80031dc:	189a      	adds	r2, r3, r2
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	615a      	str	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e6:	4915      	ldr	r1, [pc, #84]	@ (800323c <prvAddNewTaskToReadyList+0x118>)
 80031e8:	0013      	movs	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	189b      	adds	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	585b      	ldr	r3, [r3, r1]
 80031f2:	1c58      	adds	r0, r3, #1
 80031f4:	4911      	ldr	r1, [pc, #68]	@ (800323c <prvAddNewTaskToReadyList+0x118>)
 80031f6:	0013      	movs	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	189b      	adds	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	5058      	str	r0, [r3, r1]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003200:	f001 f9a0 	bl	8004544 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003204:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <prvAddNewTaskToReadyList+0x10c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <prvAddNewTaskToReadyList+0xfa>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800320c:	4b07      	ldr	r3, [pc, #28]	@ (800322c <prvAddNewTaskToReadyList+0x108>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	429a      	cmp	r2, r3
 8003218:	d201      	bcs.n	800321e <prvAddNewTaskToReadyList+0xfa>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800321a:	f001 f971 	bl	8004500 <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800321e:	46c0      	nop			@ (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b004      	add	sp, #16
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	20000220 	.word	0x20000220
 800322c:	20000148 	.word	0x20000148
 8003230:	2000022c 	.word	0x2000022c
 8003234:	2000023c 	.word	0x2000023c
 8003238:	20000228 	.word	0x20000228
 800323c:	2000014c 	.word	0x2000014c

08003240 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <xTaskDelayUntil+0x1a>
 8003254:	b672      	cpsid	i
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	e7fd      	b.n	8003256 <xTaskDelayUntil+0x16>
        configASSERT( ( xTimeIncrement > 0U ) );
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <xTaskDelayUntil+0x26>
 8003260:	b672      	cpsid	i
 8003262:	46c0      	nop			@ (mov r8, r8)
 8003264:	e7fd      	b.n	8003262 <xTaskDelayUntil+0x22>
        configASSERT( uxSchedulerSuspended == 0 );
 8003266:	4b24      	ldr	r3, [pc, #144]	@ (80032f8 <xTaskDelayUntil+0xb8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <xTaskDelayUntil+0x34>
 800326e:	b672      	cpsid	i
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	e7fd      	b.n	8003270 <xTaskDelayUntil+0x30>

        vTaskSuspendAll();
 8003274:	f000 f886 	bl	8003384 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8003278:	4b20      	ldr	r3, [pc, #128]	@ (80032fc <xTaskDelayUntil+0xbc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	18d3      	adds	r3, r2, r3
 8003286:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	429a      	cmp	r2, r3
 8003290:	d20b      	bcs.n	80032aa <xTaskDelayUntil+0x6a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	429a      	cmp	r2, r3
 800329a:	d211      	bcs.n	80032c0 <xTaskDelayUntil+0x80>
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d90d      	bls.n	80032c0 <xTaskDelayUntil+0x80>
                {
                    xShouldDelay = pdTRUE;
 80032a4:	2301      	movs	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	e00a      	b.n	80032c0 <xTaskDelayUntil+0x80>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d303      	bcc.n	80032bc <xTaskDelayUntil+0x7c>
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d901      	bls.n	80032c0 <xTaskDelayUntil+0x80>
                {
                    xShouldDelay = pdTRUE;
 80032bc:	2301      	movs	r3, #1
 80032be:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d006      	beq.n	80032da <xTaskDelayUntil+0x9a>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2100      	movs	r1, #0
 80032d4:	0018      	movs	r0, r3
 80032d6:	f000 fda5 	bl	8003e24 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80032da:	f000 f85f 	bl	800339c <xTaskResumeAll>
 80032de:	0003      	movs	r3, r0
 80032e0:	60bb      	str	r3, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <xTaskDelayUntil+0xac>
        {
            portYIELD_WITHIN_API();
 80032e8:	f001 f90a 	bl	8004500 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80032ec:	697b      	ldr	r3, [r7, #20]
    }
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b006      	add	sp, #24
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	20000248 	.word	0x20000248
 80032fc:	20000224 	.word	0x20000224

08003300 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003306:	4918      	ldr	r1, [pc, #96]	@ (8003368 <vTaskStartScheduler+0x68>)
 8003308:	4818      	ldr	r0, [pc, #96]	@ (800336c <vTaskStartScheduler+0x6c>)
 800330a:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <vTaskStartScheduler+0x70>)
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	2300      	movs	r3, #0
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	2300      	movs	r3, #0
 8003314:	223c      	movs	r2, #60	@ 0x3c
 8003316:	f7ff fe34 	bl	8002f82 <xTaskCreate>
 800331a:	0003      	movs	r3, r0
 800331c:	607b      	str	r3, [r7, #4]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d103      	bne.n	800332c <vTaskStartScheduler+0x2c>
        {
            xReturn = xTimerCreateTimerTask();
 8003324:	f000 fdec 	bl	8003f00 <xTimerCreateTimerTask>
 8003328:	0003      	movs	r3, r0
 800332a:	607b      	str	r3, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10d      	bne.n	800334e <vTaskStartScheduler+0x4e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8003332:	b672      	cpsid	i
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003334:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <vTaskStartScheduler+0x74>)
 8003336:	2201      	movs	r2, #1
 8003338:	4252      	negs	r2, r2
 800333a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800333c:	4b0e      	ldr	r3, [pc, #56]	@ (8003378 <vTaskStartScheduler+0x78>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003342:	4b0e      	ldr	r3, [pc, #56]	@ (800337c <vTaskStartScheduler+0x7c>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003348:	f001 f8b6 	bl	80044b8 <xPortStartScheduler>
 800334c:	e005      	b.n	800335a <vTaskStartScheduler+0x5a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	3301      	adds	r3, #1
 8003352:	d102      	bne.n	800335a <vTaskStartScheduler+0x5a>
 8003354:	b672      	cpsid	i
 8003356:	46c0      	nop			@ (mov r8, r8)
 8003358:	e7fd      	b.n	8003356 <vTaskStartScheduler+0x56>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800335a:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <vTaskStartScheduler+0x80>)
 800335c:	681b      	ldr	r3, [r3, #0]
}
 800335e:	46c0      	nop			@ (mov r8, r8)
 8003360:	46bd      	mov	sp, r7
 8003362:	b002      	add	sp, #8
 8003364:	bd80      	pop	{r7, pc}
 8003366:	46c0      	nop			@ (mov r8, r8)
 8003368:	08004a28 	.word	0x08004a28
 800336c:	08003b89 	.word	0x08003b89
 8003370:	20000244 	.word	0x20000244
 8003374:	20000240 	.word	0x20000240
 8003378:	2000022c 	.word	0x2000022c
 800337c:	20000224 	.word	0x20000224
 8003380:	2000000c 	.word	0x2000000c

08003384 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003388:	4b03      	ldr	r3, [pc, #12]	@ (8003398 <vTaskSuspendAll+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	4b02      	ldr	r3, [pc, #8]	@ (8003398 <vTaskSuspendAll+0x14>)
 8003390:	601a      	str	r2, [r3, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	20000248 	.word	0x20000248

0800339c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80033aa:	4b69      	ldr	r3, [pc, #420]	@ (8003550 <xTaskResumeAll+0x1b4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <xTaskResumeAll+0x1c>
 80033b2:	b672      	cpsid	i
 80033b4:	46c0      	nop			@ (mov r8, r8)
 80033b6:	e7fd      	b.n	80033b4 <xTaskResumeAll+0x18>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80033b8:	f001 f8b2 	bl	8004520 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80033bc:	4b64      	ldr	r3, [pc, #400]	@ (8003550 <xTaskResumeAll+0x1b4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	1e5a      	subs	r2, r3, #1
 80033c2:	4b63      	ldr	r3, [pc, #396]	@ (8003550 <xTaskResumeAll+0x1b4>)
 80033c4:	601a      	str	r2, [r3, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033c6:	4b62      	ldr	r3, [pc, #392]	@ (8003550 <xTaskResumeAll+0x1b4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d000      	beq.n	80033d0 <xTaskResumeAll+0x34>
 80033ce:	e0b7      	b.n	8003540 <xTaskResumeAll+0x1a4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033d0:	4b60      	ldr	r3, [pc, #384]	@ (8003554 <xTaskResumeAll+0x1b8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d100      	bne.n	80033da <xTaskResumeAll+0x3e>
 80033d8:	e0b2      	b.n	8003540 <xTaskResumeAll+0x1a4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033da:	e089      	b.n	80034f0 <xTaskResumeAll+0x154>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003558 <xTaskResumeAll+0x1bc>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	6a12      	ldr	r2, [r2, #32]
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	69d2      	ldr	r2, [r2, #28]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	3318      	adds	r3, #24
 8003406:	429a      	cmp	r2, r3
 8003408:	d103      	bne.n	8003412 <xTaskResumeAll+0x76>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	6a1a      	ldr	r2, [r3, #32]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2200      	movs	r2, #0
 8003416:	629a      	str	r2, [r3, #40]	@ 0x28
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	1e5a      	subs	r2, r3, #1
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	68d2      	ldr	r2, [r2, #12]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	6892      	ldr	r2, [r2, #8]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3304      	adds	r3, #4
 8003444:	429a      	cmp	r2, r3
 8003446:	d103      	bne.n	8003450 <xTaskResumeAll+0xb4>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	605a      	str	r2, [r3, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2200      	movs	r2, #0
 8003454:	615a      	str	r2, [r3, #20]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	1e5a      	subs	r2, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003464:	4b3d      	ldr	r3, [pc, #244]	@ (800355c <xTaskResumeAll+0x1c0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d903      	bls.n	8003474 <xTaskResumeAll+0xd8>
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003470:	4b3a      	ldr	r3, [pc, #232]	@ (800355c <xTaskResumeAll+0x1c0>)
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003478:	4939      	ldr	r1, [pc, #228]	@ (8003560 <xTaskResumeAll+0x1c4>)
 800347a:	0013      	movs	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	189b      	adds	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	18cb      	adds	r3, r1, r3
 8003484:	3304      	adds	r3, #4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	603b      	str	r3, [r7, #0]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	3204      	adds	r2, #4
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	1d1a      	adds	r2, r3, #4
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ae:	0013      	movs	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	189b      	adds	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003560 <xTaskResumeAll+0x1c4>)
 80034b8:	189a      	adds	r2, r3, r2
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	615a      	str	r2, [r3, #20]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c2:	4927      	ldr	r1, [pc, #156]	@ (8003560 <xTaskResumeAll+0x1c4>)
 80034c4:	0013      	movs	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	189b      	adds	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	585b      	ldr	r3, [r3, r1]
 80034ce:	1c58      	adds	r0, r3, #1
 80034d0:	4923      	ldr	r1, [pc, #140]	@ (8003560 <xTaskResumeAll+0x1c4>)
 80034d2:	0013      	movs	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	189b      	adds	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	5058      	str	r0, [r3, r1]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e0:	4b20      	ldr	r3, [pc, #128]	@ (8003564 <xTaskResumeAll+0x1c8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d302      	bcc.n	80034f0 <xTaskResumeAll+0x154>
                    {
                        xYieldPending = pdTRUE;
 80034ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003568 <xTaskResumeAll+0x1cc>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034f0:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <xTaskResumeAll+0x1bc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d000      	beq.n	80034fa <xTaskResumeAll+0x15e>
 80034f8:	e770      	b.n	80033dc <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <xTaskResumeAll+0x168>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003500:	f000 fbd6 	bl	8003cb0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003504:	4b19      	ldr	r3, [pc, #100]	@ (800356c <xTaskResumeAll+0x1d0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00f      	beq.n	8003530 <xTaskResumeAll+0x194>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003510:	f000 f83c 	bl	800358c <xTaskIncrementTick>
 8003514:	1e03      	subs	r3, r0, #0
 8003516:	d002      	beq.n	800351e <xTaskResumeAll+0x182>
                            {
                                xYieldPending = pdTRUE;
 8003518:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <xTaskResumeAll+0x1cc>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	3b01      	subs	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f2      	bne.n	8003510 <xTaskResumeAll+0x174>

                        xPendedTicks = 0;
 800352a:	4b10      	ldr	r3, [pc, #64]	@ (800356c <xTaskResumeAll+0x1d0>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003530:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <xTaskResumeAll+0x1cc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <xTaskResumeAll+0x1a4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003538:	2301      	movs	r3, #1
 800353a:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800353c:	f000 ffe0 	bl	8004500 <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003540:	f001 f800 	bl	8004544 <vPortExitCritical>

    return xAlreadyYielded;
 8003544:	693b      	ldr	r3, [r7, #16]
}
 8003546:	0018      	movs	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	b006      	add	sp, #24
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	20000248 	.word	0x20000248
 8003554:	20000220 	.word	0x20000220
 8003558:	200001e0 	.word	0x200001e0
 800355c:	20000228 	.word	0x20000228
 8003560:	2000014c 	.word	0x2000014c
 8003564:	20000148 	.word	0x20000148
 8003568:	20000234 	.word	0x20000234
 800356c:	20000230 	.word	0x20000230

08003570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003576:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <xTaskGetTickCount+0x18>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800357c:	687b      	ldr	r3, [r7, #4]
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b002      	add	sp, #8
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	20000224 	.word	0x20000224

0800358c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003596:	4b78      	ldr	r3, [pc, #480]	@ (8003778 <xTaskIncrementTick+0x1ec>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d000      	beq.n	80035a0 <xTaskIncrementTick+0x14>
 800359e:	e0e1      	b.n	8003764 <xTaskIncrementTick+0x1d8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035a0:	4b76      	ldr	r3, [pc, #472]	@ (800377c <xTaskIncrementTick+0x1f0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80035a8:	4b74      	ldr	r3, [pc, #464]	@ (800377c <xTaskIncrementTick+0x1f0>)
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	601a      	str	r2, [r3, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d118      	bne.n	80035e6 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 80035b4:	4b72      	ldr	r3, [pc, #456]	@ (8003780 <xTaskIncrementTick+0x1f4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <xTaskIncrementTick+0x38>
 80035be:	b672      	cpsid	i
 80035c0:	46c0      	nop			@ (mov r8, r8)
 80035c2:	e7fd      	b.n	80035c0 <xTaskIncrementTick+0x34>
 80035c4:	4b6e      	ldr	r3, [pc, #440]	@ (8003780 <xTaskIncrementTick+0x1f4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003784 <xTaskIncrementTick+0x1f8>)
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b6c      	ldr	r3, [pc, #432]	@ (8003780 <xTaskIncrementTick+0x1f4>)
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003784 <xTaskIncrementTick+0x1f8>)
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003788 <xTaskIncrementTick+0x1fc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	4b6a      	ldr	r3, [pc, #424]	@ (8003788 <xTaskIncrementTick+0x1fc>)
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	f000 fb65 	bl	8003cb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035e6:	4b69      	ldr	r3, [pc, #420]	@ (800378c <xTaskIncrementTick+0x200>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d200      	bcs.n	80035f2 <xTaskIncrementTick+0x66>
 80035f0:	e0a4      	b.n	800373c <xTaskIncrementTick+0x1b0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f2:	4b63      	ldr	r3, [pc, #396]	@ (8003780 <xTaskIncrementTick+0x1f4>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035fc:	4b63      	ldr	r3, [pc, #396]	@ (800378c <xTaskIncrementTick+0x200>)
 80035fe:	2201      	movs	r2, #1
 8003600:	4252      	negs	r2, r2
 8003602:	601a      	str	r2, [r3, #0]
                    break;
 8003604:	e09a      	b.n	800373c <xTaskIncrementTick+0x1b0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003606:	4b5e      	ldr	r3, [pc, #376]	@ (8003780 <xTaskIncrementTick+0x1f4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	429a      	cmp	r2, r3
 800361c:	d203      	bcs.n	8003626 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800361e:	4b5b      	ldr	r3, [pc, #364]	@ (800378c <xTaskIncrementTick+0x200>)
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	601a      	str	r2, [r3, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003624:	e08a      	b.n	800373c <xTaskIncrementTick+0x1b0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	68d2      	ldr	r2, [r2, #12]
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	6892      	ldr	r2, [r2, #8]
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	3304      	adds	r3, #4
 8003648:	429a      	cmp	r2, r3
 800364a:	d103      	bne.n	8003654 <xTaskIncrementTick+0xc8>
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	2200      	movs	r2, #0
 8003658:	615a      	str	r2, [r3, #20]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	1e5a      	subs	r2, r3, #1
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01e      	beq.n	80036aa <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	6a12      	ldr	r2, [r2, #32]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	69d2      	ldr	r2, [r2, #28]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	3318      	adds	r3, #24
 800368e:	429a      	cmp	r2, r3
 8003690:	d103      	bne.n	800369a <xTaskIncrementTick+0x10e>
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6a1a      	ldr	r2, [r3, #32]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2200      	movs	r2, #0
 800369e:	629a      	str	r2, [r3, #40]	@ 0x28
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	1e5a      	subs	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ae:	4b38      	ldr	r3, [pc, #224]	@ (8003790 <xTaskIncrementTick+0x204>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d903      	bls.n	80036be <xTaskIncrementTick+0x132>
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ba:	4b35      	ldr	r3, [pc, #212]	@ (8003790 <xTaskIncrementTick+0x204>)
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c2:	4934      	ldr	r1, [pc, #208]	@ (8003794 <xTaskIncrementTick+0x208>)
 80036c4:	0013      	movs	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	189b      	adds	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	18cb      	adds	r3, r1, r3
 80036ce:	3304      	adds	r3, #4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	609a      	str	r2, [r3, #8]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	3204      	adds	r2, #4
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1d1a      	adds	r2, r3, #4
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036f8:	0013      	movs	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	189b      	adds	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4a24      	ldr	r2, [pc, #144]	@ (8003794 <xTaskIncrementTick+0x208>)
 8003702:	189a      	adds	r2, r3, r2
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	615a      	str	r2, [r3, #20]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800370c:	4921      	ldr	r1, [pc, #132]	@ (8003794 <xTaskIncrementTick+0x208>)
 800370e:	0013      	movs	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	189b      	adds	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	585b      	ldr	r3, [r3, r1]
 8003718:	1c58      	adds	r0, r3, #1
 800371a:	491e      	ldr	r1, [pc, #120]	@ (8003794 <xTaskIncrementTick+0x208>)
 800371c:	0013      	movs	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	189b      	adds	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	5058      	str	r0, [r3, r1]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372a:	4b1b      	ldr	r3, [pc, #108]	@ (8003798 <xTaskIncrementTick+0x20c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003730:	429a      	cmp	r2, r3
 8003732:	d800      	bhi.n	8003736 <xTaskIncrementTick+0x1aa>
 8003734:	e75d      	b.n	80035f2 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 8003736:	2301      	movs	r3, #1
 8003738:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800373a:	e75a      	b.n	80035f2 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800373c:	4b16      	ldr	r3, [pc, #88]	@ (8003798 <xTaskIncrementTick+0x20c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003742:	4914      	ldr	r1, [pc, #80]	@ (8003794 <xTaskIncrementTick+0x208>)
 8003744:	0013      	movs	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	189b      	adds	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	585b      	ldr	r3, [r3, r1]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d901      	bls.n	8003756 <xTaskIncrementTick+0x1ca>
            {
                xSwitchRequired = pdTRUE;
 8003752:	2301      	movs	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003756:	4b11      	ldr	r3, [pc, #68]	@ (800379c <xTaskIncrementTick+0x210>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <xTaskIncrementTick+0x1e2>
            {
                xSwitchRequired = pdTRUE;
 800375e:	2301      	movs	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	e004      	b.n	800376e <xTaskIncrementTick+0x1e2>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003764:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <xTaskIncrementTick+0x214>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	4b0d      	ldr	r3, [pc, #52]	@ (80037a0 <xTaskIncrementTick+0x214>)
 800376c:	601a      	str	r2, [r3, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800376e:	69fb      	ldr	r3, [r7, #28]
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b008      	add	sp, #32
 8003776:	bd80      	pop	{r7, pc}
 8003778:	20000248 	.word	0x20000248
 800377c:	20000224 	.word	0x20000224
 8003780:	200001d8 	.word	0x200001d8
 8003784:	200001dc 	.word	0x200001dc
 8003788:	20000238 	.word	0x20000238
 800378c:	20000240 	.word	0x20000240
 8003790:	20000228 	.word	0x20000228
 8003794:	2000014c 	.word	0x2000014c
 8003798:	20000148 	.word	0x20000148
 800379c:	20000234 	.word	0x20000234
 80037a0:	20000230 	.word	0x20000230

080037a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037aa:	4b22      	ldr	r3, [pc, #136]	@ (8003834 <vTaskSwitchContext+0x90>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80037b2:	4b21      	ldr	r3, [pc, #132]	@ (8003838 <vTaskSwitchContext+0x94>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80037b8:	e038      	b.n	800382c <vTaskSwitchContext+0x88>
        xYieldPending = pdFALSE;
 80037ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003838 <vTaskSwitchContext+0x94>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c0:	4b1e      	ldr	r3, [pc, #120]	@ (800383c <vTaskSwitchContext+0x98>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	e008      	b.n	80037da <vTaskSwitchContext+0x36>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <vTaskSwitchContext+0x30>
 80037ce:	b672      	cpsid	i
 80037d0:	46c0      	nop			@ (mov r8, r8)
 80037d2:	e7fd      	b.n	80037d0 <vTaskSwitchContext+0x2c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	4919      	ldr	r1, [pc, #100]	@ (8003840 <vTaskSwitchContext+0x9c>)
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	0013      	movs	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	585b      	ldr	r3, [r3, r1]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0ed      	beq.n	80037c8 <vTaskSwitchContext+0x24>
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	0013      	movs	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4a12      	ldr	r2, [pc, #72]	@ (8003840 <vTaskSwitchContext+0x9c>)
 80037f8:	189b      	adds	r3, r3, r2
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	3308      	adds	r3, #8
 800380e:	429a      	cmp	r2, r3
 8003810:	d104      	bne.n	800381c <vTaskSwitchContext+0x78>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <vTaskSwitchContext+0xa0>)
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	4b05      	ldr	r3, [pc, #20]	@ (800383c <vTaskSwitchContext+0x98>)
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	601a      	str	r2, [r3, #0]
}
 800382c:	46c0      	nop			@ (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20000248 	.word	0x20000248
 8003838:	20000234 	.word	0x20000234
 800383c:	20000228 	.word	0x20000228
 8003840:	2000014c 	.word	0x2000014c
 8003844:	20000148 	.word	0x20000148

08003848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <vTaskPlaceOnEventList+0x16>
 8003858:	b672      	cpsid	i
 800385a:	46c0      	nop			@ (mov r8, r8)
 800385c:	e7fd      	b.n	800385a <vTaskPlaceOnEventList+0x12>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800385e:	4b09      	ldr	r3, [pc, #36]	@ (8003884 <vTaskPlaceOnEventList+0x3c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3318      	adds	r3, #24
 8003864:	001a      	movs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	0011      	movs	r1, r2
 800386a:	0018      	movs	r0, r3
 800386c:	f7fe ff03 	bl	8002676 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	0018      	movs	r0, r3
 8003876:	f000 fad5 	bl	8003e24 <prvAddCurrentTaskToDelayedList>
}
 800387a:	46c0      	nop			@ (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	20000148 	.word	0x20000148

08003888 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <vTaskPlaceOnEventListRestricted+0x18>
 800389a:	b672      	cpsid	i
 800389c:	46c0      	nop			@ (mov r8, r8)
 800389e:	e7fd      	b.n	800389c <vTaskPlaceOnEventListRestricted+0x14>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	4b17      	ldr	r3, [pc, #92]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x7c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	61da      	str	r2, [r3, #28]
 80038ae:	4b15      	ldr	r3, [pc, #84]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x7c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	6892      	ldr	r2, [r2, #8]
 80038b6:	621a      	str	r2, [r3, #32]
 80038b8:	4b12      	ldr	r3, [pc, #72]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x7c>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	3218      	adds	r2, #24
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x7c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3318      	adds	r3, #24
 80038ca:	001a      	movs	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x7c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 80038e8:	2301      	movs	r3, #1
 80038ea:	425b      	negs	r3, r3
 80038ec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	0011      	movs	r1, r2
 80038f4:	0018      	movs	r0, r3
 80038f6:	f000 fa95 	bl	8003e24 <prvAddCurrentTaskToDelayedList>
    }
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b006      	add	sp, #24
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	20000148 	.word	0x20000148

08003908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <xTaskRemoveFromEventList+0x1c>
 800391e:	b672      	cpsid	i
 8003920:	46c0      	nop			@ (mov r8, r8)
 8003922:	e7fd      	b.n	8003920 <xTaskRemoveFromEventList+0x18>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	6a12      	ldr	r2, [r2, #32]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	69d2      	ldr	r2, [r2, #28]
 800393c:	605a      	str	r2, [r3, #4]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	3318      	adds	r3, #24
 8003946:	429a      	cmp	r2, r3
 8003948:	d103      	bne.n	8003952 <xTaskRemoveFromEventList+0x4a>
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	6a1a      	ldr	r2, [r3, #32]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2200      	movs	r2, #0
 8003956:	629a      	str	r2, [r3, #40]	@ 0x28
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	1e5a      	subs	r2, r3, #1
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003962:	4b49      	ldr	r3, [pc, #292]	@ (8003a88 <xTaskRemoveFromEventList+0x180>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d15d      	bne.n	8003a26 <xTaskRemoveFromEventList+0x11e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	68d2      	ldr	r2, [r2, #12]
 8003978:	609a      	str	r2, [r3, #8]
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	6892      	ldr	r2, [r2, #8]
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	3304      	adds	r3, #4
 800398c:	429a      	cmp	r2, r3
 800398e:	d103      	bne.n	8003998 <xTaskRemoveFromEventList+0x90>
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2200      	movs	r2, #0
 800399c:	615a      	str	r2, [r3, #20]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	1e5a      	subs	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ac:	4b37      	ldr	r3, [pc, #220]	@ (8003a8c <xTaskRemoveFromEventList+0x184>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d903      	bls.n	80039bc <xTaskRemoveFromEventList+0xb4>
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039b8:	4b34      	ldr	r3, [pc, #208]	@ (8003a8c <xTaskRemoveFromEventList+0x184>)
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c0:	4933      	ldr	r1, [pc, #204]	@ (8003a90 <xTaskRemoveFromEventList+0x188>)
 80039c2:	0013      	movs	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	18cb      	adds	r3, r1, r3
 80039cc:	3304      	adds	r3, #4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	3204      	adds	r2, #4
 80039e8:	605a      	str	r2, [r3, #4]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	1d1a      	adds	r2, r3, #4
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f6:	0013      	movs	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4a24      	ldr	r2, [pc, #144]	@ (8003a90 <xTaskRemoveFromEventList+0x188>)
 8003a00:	189a      	adds	r2, r3, r2
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	615a      	str	r2, [r3, #20]
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0a:	4921      	ldr	r1, [pc, #132]	@ (8003a90 <xTaskRemoveFromEventList+0x188>)
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	189b      	adds	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	585b      	ldr	r3, [r3, r1]
 8003a16:	1c58      	adds	r0, r3, #1
 8003a18:	491d      	ldr	r1, [pc, #116]	@ (8003a90 <xTaskRemoveFromEventList+0x188>)
 8003a1a:	0013      	movs	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	5058      	str	r0, [r3, r1]
 8003a24:	e01b      	b.n	8003a5e <xTaskRemoveFromEventList+0x156>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a26:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <xTaskRemoveFromEventList+0x18c>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	61da      	str	r2, [r3, #28]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	621a      	str	r2, [r3, #32]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	3218      	adds	r2, #24
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	3318      	adds	r3, #24
 8003a48:	001a      	movs	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	4a10      	ldr	r2, [pc, #64]	@ (8003a94 <xTaskRemoveFromEventList+0x18c>)
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a54:	4b0f      	ldr	r3, [pc, #60]	@ (8003a94 <xTaskRemoveFromEventList+0x18c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a94 <xTaskRemoveFromEventList+0x18c>)
 8003a5c:	601a      	str	r2, [r3, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a62:	4b0d      	ldr	r3, [pc, #52]	@ (8003a98 <xTaskRemoveFromEventList+0x190>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d905      	bls.n	8003a78 <xTaskRemoveFromEventList+0x170>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a70:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <xTaskRemoveFromEventList+0x194>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	e001      	b.n	8003a7c <xTaskRemoveFromEventList+0x174>
    }
    else
    {
        xReturn = pdFALSE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b008      	add	sp, #32
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	20000248 	.word	0x20000248
 8003a8c:	20000228 	.word	0x20000228
 8003a90:	2000014c 	.word	0x2000014c
 8003a94:	200001e0 	.word	0x200001e0
 8003a98:	20000148 	.word	0x20000148
 8003a9c:	20000234 	.word	0x20000234

08003aa0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <vTaskInternalSetTimeOutState+0x20>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ab0:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <vTaskInternalSetTimeOutState+0x24>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	605a      	str	r2, [r3, #4]
}
 8003ab8:	46c0      	nop			@ (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	b002      	add	sp, #8
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000238 	.word	0x20000238
 8003ac4:	20000224 	.word	0x20000224

08003ac8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d102      	bne.n	8003ade <xTaskCheckForTimeOut+0x16>
 8003ad8:	b672      	cpsid	i
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	e7fd      	b.n	8003ada <xTaskCheckForTimeOut+0x12>
    configASSERT( pxTicksToWait );
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <xTaskCheckForTimeOut+0x22>
 8003ae4:	b672      	cpsid	i
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	e7fd      	b.n	8003ae6 <xTaskCheckForTimeOut+0x1e>

    taskENTER_CRITICAL();
 8003aea:	f000 fd19 	bl	8004520 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003aee:	4b1f      	ldr	r3, [pc, #124]	@ (8003b6c <xTaskCheckForTimeOut+0xa4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3301      	adds	r3, #1
 8003b04:	d102      	bne.n	8003b0c <xTaskCheckForTimeOut+0x44>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e027      	b.n	8003b5c <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b17      	ldr	r3, [pc, #92]	@ (8003b70 <xTaskCheckForTimeOut+0xa8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d00a      	beq.n	8003b2e <xTaskCheckForTimeOut+0x66>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d305      	bcc.n	8003b2e <xTaskCheckForTimeOut+0x66>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b22:	2301      	movs	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e016      	b.n	8003b5c <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d20c      	bcs.n	8003b52 <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1ad2      	subs	r2, r2, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f7ff ffaa 	bl	8003aa0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	e004      	b.n	8003b5c <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003b5c:	f000 fcf2 	bl	8004544 <vPortExitCritical>

    return xReturn;
 8003b60:	697b      	ldr	r3, [r7, #20]
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b006      	add	sp, #24
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			@ (mov r8, r8)
 8003b6c:	20000224 	.word	0x20000224
 8003b70:	20000238 	.word	0x20000238

08003b74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b78:	4b02      	ldr	r3, [pc, #8]	@ (8003b84 <vTaskMissedYield+0x10>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]
}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000234 	.word	0x20000234

08003b88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b90:	f000 f84e 	bl	8003c30 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b94:	4b03      	ldr	r3, [pc, #12]	@ (8003ba4 <prvIdleTask+0x1c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d9f9      	bls.n	8003b90 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003b9c:	f000 fcb0 	bl	8004500 <vPortYield>
        prvCheckTasksWaitingTermination();
 8003ba0:	e7f6      	b.n	8003b90 <prvIdleTask+0x8>
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	2000014c 	.word	0x2000014c

08003ba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	e00c      	b.n	8003bce <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	0013      	movs	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a14      	ldr	r2, [pc, #80]	@ (8003c10 <prvInitialiseTaskLists+0x68>)
 8003bc0:	189b      	adds	r3, r3, r2
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f7fe fd2e 	bl	8002624 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d9ef      	bls.n	8003bb4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c14 <prvInitialiseTaskLists+0x6c>)
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7fe fd24 	bl	8002624 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8003c18 <prvInitialiseTaskLists+0x70>)
 8003bde:	0018      	movs	r0, r3
 8003be0:	f7fe fd20 	bl	8002624 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003be4:	4b0d      	ldr	r3, [pc, #52]	@ (8003c1c <prvInitialiseTaskLists+0x74>)
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7fe fd1c 	bl	8002624 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003bec:	4b0c      	ldr	r3, [pc, #48]	@ (8003c20 <prvInitialiseTaskLists+0x78>)
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f7fe fd18 	bl	8002624 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <prvInitialiseTaskLists+0x7c>)
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7fe fd14 	bl	8002624 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <prvInitialiseTaskLists+0x80>)
 8003bfe:	4a05      	ldr	r2, [pc, #20]	@ (8003c14 <prvInitialiseTaskLists+0x6c>)
 8003c00:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c02:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <prvInitialiseTaskLists+0x84>)
 8003c04:	4a04      	ldr	r2, [pc, #16]	@ (8003c18 <prvInitialiseTaskLists+0x70>)
 8003c06:	601a      	str	r2, [r3, #0]
}
 8003c08:	46c0      	nop			@ (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	2000014c 	.word	0x2000014c
 8003c14:	200001b0 	.word	0x200001b0
 8003c18:	200001c4 	.word	0x200001c4
 8003c1c:	200001e0 	.word	0x200001e0
 8003c20:	200001f4 	.word	0x200001f4
 8003c24:	2000020c 	.word	0x2000020c
 8003c28:	200001d8 	.word	0x200001d8
 8003c2c:	200001dc 	.word	0x200001dc

08003c30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c36:	e01a      	b.n	8003c6e <prvCheckTasksWaitingTermination+0x3e>
        {
            taskENTER_CRITICAL();
 8003c38:	f000 fc72 	bl	8004520 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c3c:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <prvCheckTasksWaitingTermination+0x50>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f7fe fd4a 	bl	80026e2 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <prvCheckTasksWaitingTermination+0x54>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <prvCheckTasksWaitingTermination+0x54>)
 8003c56:	601a      	str	r2, [r3, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003c58:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <prvCheckTasksWaitingTermination+0x58>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	1e5a      	subs	r2, r3, #1
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c88 <prvCheckTasksWaitingTermination+0x58>)
 8003c60:	601a      	str	r2, [r3, #0]
            }
            taskEXIT_CRITICAL();
 8003c62:	f000 fc6f 	bl	8004544 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f000 f80f 	bl	8003c8c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c6e:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <prvCheckTasksWaitingTermination+0x58>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1e0      	bne.n	8003c38 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c76:	46c0      	nop			@ (mov r8, r8)
 8003c78:	46c0      	nop			@ (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	200001f4 	.word	0x200001f4
 8003c84:	20000220 	.word	0x20000220
 8003c88:	20000208 	.word	0x20000208

08003c8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f000 fd7f 	bl	800479c <vPortFree>
            vPortFree( pxTCB );
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f000 fd7b 	bl	800479c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b002      	add	sp, #8
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb4:	4b09      	ldr	r3, [pc, #36]	@ (8003cdc <prvResetNextTaskUnblockTime+0x2c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d104      	bne.n	8003cc8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cbe:	4b08      	ldr	r3, [pc, #32]	@ (8003ce0 <prvResetNextTaskUnblockTime+0x30>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4252      	negs	r2, r2
 8003cc4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cc6:	e005      	b.n	8003cd4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cc8:	4b04      	ldr	r3, [pc, #16]	@ (8003cdc <prvResetNextTaskUnblockTime+0x2c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b03      	ldr	r3, [pc, #12]	@ (8003ce0 <prvResetNextTaskUnblockTime+0x30>)
 8003cd2:	601a      	str	r2, [r3, #0]
}
 8003cd4:	46c0      	nop			@ (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	200001d8 	.word	0x200001d8
 8003ce0:	20000240 	.word	0x20000240

08003ce4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003cea:	4b0a      	ldr	r3, [pc, #40]	@ (8003d14 <xTaskGetSchedulerState+0x30>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d102      	bne.n	8003cf8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	e008      	b.n	8003d0a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf8:	4b07      	ldr	r3, [pc, #28]	@ (8003d18 <xTaskGetSchedulerState+0x34>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d00:	2302      	movs	r3, #2
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	e001      	b.n	8003d0a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d06:	2300      	movs	r3, #0
 8003d08:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d0a:	687b      	ldr	r3, [r7, #4]
    }
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b002      	add	sp, #8
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	2000022c 	.word	0x2000022c
 8003d18:	20000248 	.word	0x20000248

08003d1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d06c      	beq.n	8003e0c <xTaskPriorityDisinherit+0xf0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003d32:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <xTaskPriorityDisinherit+0xfc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d002      	beq.n	8003d42 <xTaskPriorityDisinherit+0x26>
 8003d3c:	b672      	cpsid	i
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	e7fd      	b.n	8003d3e <xTaskPriorityDisinherit+0x22>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <xTaskPriorityDisinherit+0x34>
 8003d4a:	b672      	cpsid	i
 8003d4c:	46c0      	nop			@ (mov r8, r8)
 8003d4e:	e7fd      	b.n	8003d4c <xTaskPriorityDisinherit+0x30>
            ( pxTCB->uxMutexesHeld )--;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d54:	1e5a      	subs	r2, r3, #1
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d052      	beq.n	8003e0c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d14e      	bne.n	8003e0c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	3304      	adds	r3, #4
 8003d72:	0018      	movs	r0, r3
 8003d74:	f7fe fcb5 	bl	80026e2 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d84:	2205      	movs	r2, #5
 8003d86:	1ad2      	subs	r2, r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d90:	4b22      	ldr	r3, [pc, #136]	@ (8003e1c <xTaskPriorityDisinherit+0x100>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d903      	bls.n	8003da0 <xTaskPriorityDisinherit+0x84>
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003e1c <xTaskPriorityDisinherit+0x100>)
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da4:	491e      	ldr	r1, [pc, #120]	@ (8003e20 <xTaskPriorityDisinherit+0x104>)
 8003da6:	0013      	movs	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	189b      	adds	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	18cb      	adds	r3, r1, r3
 8003db0:	3304      	adds	r3, #4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	60da      	str	r2, [r3, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	3204      	adds	r2, #4
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1d1a      	adds	r2, r3, #4
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	609a      	str	r2, [r3, #8]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dda:	0013      	movs	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	189b      	adds	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4a0f      	ldr	r2, [pc, #60]	@ (8003e20 <xTaskPriorityDisinherit+0x104>)
 8003de4:	189a      	adds	r2, r3, r2
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	615a      	str	r2, [r3, #20]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dee:	490c      	ldr	r1, [pc, #48]	@ (8003e20 <xTaskPriorityDisinherit+0x104>)
 8003df0:	0013      	movs	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	189b      	adds	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	585b      	ldr	r3, [r3, r1]
 8003dfa:	1c58      	adds	r0, r3, #1
 8003dfc:	4908      	ldr	r1, [pc, #32]	@ (8003e20 <xTaskPriorityDisinherit+0x104>)
 8003dfe:	0013      	movs	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	189b      	adds	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	5058      	str	r0, [r3, r1]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e0c:	697b      	ldr	r3, [r7, #20]
    }
 8003e0e:	0018      	movs	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	b006      	add	sp, #24
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	20000148 	.word	0x20000148
 8003e1c:	20000228 	.word	0x20000228
 8003e20:	2000014c 	.word	0x2000014c

08003e24 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e34:	4b2d      	ldr	r3, [pc, #180]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7fe fc51 	bl	80026e2 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3301      	adds	r3, #1
 8003e44:	d124      	bne.n	8003e90 <prvAddCurrentTaskToDelayedList+0x6c>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d021      	beq.n	8003e90 <prvAddCurrentTaskToDelayedList+0x6c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e4c:	4b28      	ldr	r3, [pc, #160]	@ (8003ef0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	4b26      	ldr	r3, [pc, #152]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	609a      	str	r2, [r3, #8]
 8003e5a:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	6892      	ldr	r2, [r2, #8]
 8003e62:	60da      	str	r2, [r3, #12]
 8003e64:	4b21      	ldr	r3, [pc, #132]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	3204      	adds	r2, #4
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	4b1e      	ldr	r3, [pc, #120]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	1d1a      	adds	r2, r3, #4
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	609a      	str	r2, [r3, #8]
 8003e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ef0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003e80:	615a      	str	r2, [r3, #20]
 8003e82:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	4b19      	ldr	r3, [pc, #100]	@ (8003ef0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	46c0      	nop			@ (mov r8, r8)

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e8e:	e026      	b.n	8003ede <prvAddCurrentTaskToDelayedList+0xba>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	18d3      	adds	r3, r2, r3
 8003e96:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e98:	4b14      	ldr	r3, [pc, #80]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d209      	bcs.n	8003ebc <prvAddCurrentTaskToDelayedList+0x98>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea8:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b0f      	ldr	r3, [pc, #60]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	0010      	movs	r0, r2
 8003eb6:	f7fe fbde 	bl	8002676 <vListInsert>
}
 8003eba:	e010      	b.n	8003ede <prvAddCurrentTaskToDelayedList+0xba>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	0019      	movs	r1, r3
 8003ec8:	0010      	movs	r0, r2
 8003eca:	f7fe fbd4 	bl	8002676 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003ece:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d202      	bcs.n	8003ede <prvAddCurrentTaskToDelayedList+0xba>
                    xNextTaskUnblockTime = xTimeToWake;
 8003ed8:	4b08      	ldr	r3, [pc, #32]	@ (8003efc <prvAddCurrentTaskToDelayedList+0xd8>)
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	601a      	str	r2, [r3, #0]
}
 8003ede:	46c0      	nop			@ (mov r8, r8)
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	b006      	add	sp, #24
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	46c0      	nop			@ (mov r8, r8)
 8003ee8:	20000224 	.word	0x20000224
 8003eec:	20000148 	.word	0x20000148
 8003ef0:	2000020c 	.word	0x2000020c
 8003ef4:	200001dc 	.word	0x200001dc
 8003ef8:	200001d8 	.word	0x200001d8
 8003efc:	20000240 	.word	0x20000240

08003f00 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f0a:	f000 fa31 	bl	8004370 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f44 <xTimerCreateTimerTask+0x44>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003f16:	490c      	ldr	r1, [pc, #48]	@ (8003f48 <xTimerCreateTimerTask+0x48>)
 8003f18:	480c      	ldr	r0, [pc, #48]	@ (8003f4c <xTimerCreateTimerTask+0x4c>)
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f50 <xTimerCreateTimerTask+0x50>)
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	2302      	movs	r3, #2
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2300      	movs	r3, #0
 8003f24:	2250      	movs	r2, #80	@ 0x50
 8003f26:	f7ff f82c 	bl	8002f82 <xTaskCreate>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <xTimerCreateTimerTask+0x3a>
 8003f34:	b672      	cpsid	i
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	e7fd      	b.n	8003f36 <xTimerCreateTimerTask+0x36>
        return xReturn;
 8003f3a:	687b      	ldr	r3, [r7, #4]
    }
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b002      	add	sp, #8
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	2000027c 	.word	0x2000027c
 8003f48:	08004a30 	.word	0x08004a30
 8003f4c:	08003ffd 	.word	0x08003ffd
 8003f50:	20000280 	.word	0x20000280

08003f54 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f60:	e009      	b.n	8003f76 <prvReloadTimer+0x22>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	18d3      	adds	r3, r2, r3
 8003f6a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	0010      	movs	r0, r2
 8003f74:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	18d1      	adds	r1, r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f8da 	bl	800413c <prvInsertTimerInActiveList>
 8003f88:	1e03      	subs	r3, r0, #0
 8003f8a:	d1ea      	bne.n	8003f62 <prvReloadTimer+0xe>
        }
    }
 8003f8c:	46c0      	nop			@ (mov r8, r8)
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b004      	add	sp, #16
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa2:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <prvProcessExpiredTimer+0x60>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3304      	adds	r3, #4
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f7fe fb96 	bl	80026e2 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2228      	movs	r2, #40	@ 0x28
 8003fba:	5c9b      	ldrb	r3, [r3, r2]
 8003fbc:	001a      	movs	r2, r3
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d006      	beq.n	8003fd2 <prvProcessExpiredTimer+0x3a>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7ff ffc2 	bl	8003f54 <prvReloadTimer>
 8003fd0:	e008      	b.n	8003fe4 <prvProcessExpiredTimer+0x4c>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2228      	movs	r2, #40	@ 0x28
 8003fd6:	5c9b      	ldrb	r3, [r3, r2]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4393      	bics	r3, r2
 8003fdc:	b2d9      	uxtb	r1, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2228      	movs	r2, #40	@ 0x28
 8003fe2:	5499      	strb	r1, [r3, r2]
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	0010      	movs	r0, r2
 8003fec:	4798      	blx	r3
    }
 8003fee:	46c0      	nop			@ (mov r8, r8)
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b004      	add	sp, #16
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	46c0      	nop			@ (mov r8, r8)
 8003ff8:	20000274 	.word	0x20000274

08003ffc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004004:	2308      	movs	r3, #8
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	0018      	movs	r0, r3
 800400a:	f000 f855 	bl	80040b8 <prvGetNextExpireTime>
 800400e:	0003      	movs	r3, r0
 8004010:	60fb      	str	r3, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	0011      	movs	r1, r2
 8004018:	0018      	movs	r0, r3
 800401a:	f000 f805 	bl	8004028 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800401e:	f000 f8cf 	bl	80041c0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	e7ee      	b.n	8004004 <prvTimerTask+0x8>
	...

08004028 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004032:	f7ff f9a7 	bl	8003384 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004036:	2308      	movs	r3, #8
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	0018      	movs	r0, r3
 800403c:	f000 f85e 	bl	80040fc <prvSampleTimeNow>
 8004040:	0003      	movs	r3, r0
 8004042:	60fb      	str	r3, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d12b      	bne.n	80040a2 <prvProcessTimerOrBlockTask+0x7a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10c      	bne.n	800406a <prvProcessTimerOrBlockTask+0x42>
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	429a      	cmp	r2, r3
 8004056:	d808      	bhi.n	800406a <prvProcessTimerOrBlockTask+0x42>
                {
                    ( void ) xTaskResumeAll();
 8004058:	f7ff f9a0 	bl	800339c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0011      	movs	r1, r2
 8004062:	0018      	movs	r0, r3
 8004064:	f7ff ff98 	bl	8003f98 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004068:	e01d      	b.n	80040a6 <prvProcessTimerOrBlockTask+0x7e>
                    if( xListWasEmpty != pdFALSE )
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <prvProcessTimerOrBlockTask+0x5a>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004070:	4b0f      	ldr	r3, [pc, #60]	@ (80040b0 <prvProcessTimerOrBlockTask+0x88>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <prvProcessTimerOrBlockTask+0x56>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <prvProcessTimerOrBlockTask+0x58>
 800407e:	2300      	movs	r3, #0
 8004080:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004082:	4b0c      	ldr	r3, [pc, #48]	@ (80040b4 <prvProcessTimerOrBlockTask+0x8c>)
 8004084:	6818      	ldr	r0, [r3, #0]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	0019      	movs	r1, r3
 8004090:	f7fe ff44 	bl	8002f1c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004094:	f7ff f982 	bl	800339c <xTaskResumeAll>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d104      	bne.n	80040a6 <prvProcessTimerOrBlockTask+0x7e>
                        portYIELD_WITHIN_API();
 800409c:	f000 fa30 	bl	8004500 <vPortYield>
    }
 80040a0:	e001      	b.n	80040a6 <prvProcessTimerOrBlockTask+0x7e>
                ( void ) xTaskResumeAll();
 80040a2:	f7ff f97b 	bl	800339c <xTaskResumeAll>
    }
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b004      	add	sp, #16
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	20000278 	.word	0x20000278
 80040b4:	2000027c 	.word	0x2000027c

080040b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040c0:	4b0d      	ldr	r3, [pc, #52]	@ (80040f8 <prvGetNextExpireTime+0x40>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <prvGetNextExpireTime+0x16>
 80040ca:	2201      	movs	r2, #1
 80040cc:	e000      	b.n	80040d0 <prvGetNextExpireTime+0x18>
 80040ce:	2200      	movs	r2, #0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040dc:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <prvGetNextExpireTime+0x40>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e001      	b.n	80040ec <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80040ec:	68fb      	ldr	r3, [r7, #12]
    }
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	20000274 	.word	0x20000274

080040fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004104:	f7ff fa34 	bl	8003570 <xTaskGetTickCount>
 8004108:	0003      	movs	r3, r0
 800410a:	60fb      	str	r3, [r7, #12]

        if( xTimeNow < xLastTime )
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <prvSampleTimeNow+0x3c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	429a      	cmp	r2, r3
 8004114:	d205      	bcs.n	8004122 <prvSampleTimeNow+0x26>
        {
            prvSwitchTimerLists();
 8004116:	f000 f903 	bl	8004320 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e002      	b.n	8004128 <prvSampleTimeNow+0x2c>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004128:	4b03      	ldr	r3, [pc, #12]	@ (8004138 <prvSampleTimeNow+0x3c>)
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	601a      	str	r2, [r3, #0]

        return xTimeNow;
 800412e:	68fb      	ldr	r3, [r7, #12]
    }
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b004      	add	sp, #16
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000284 	.word	0x20000284

0800413c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	429a      	cmp	r2, r3
 8004160:	d812      	bhi.n	8004188 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	1ad2      	subs	r2, r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	e01b      	b.n	80041ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004176:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <prvInsertTimerInActiveList+0x7c>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3304      	adds	r3, #4
 800417e:	0019      	movs	r1, r3
 8004180:	0010      	movs	r0, r2
 8004182:	f7fe fa78 	bl	8002676 <vListInsert>
 8004186:	e012      	b.n	80041ae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d206      	bcs.n	800419e <prvInsertTimerInActiveList+0x62>
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d302      	bcc.n	800419e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004198:	2301      	movs	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	e007      	b.n	80041ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800419e:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <prvInsertTimerInActiveList+0x80>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3304      	adds	r3, #4
 80041a6:	0019      	movs	r1, r3
 80041a8:	0010      	movs	r0, r2
 80041aa:	f7fe fa64 	bl	8002676 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80041ae:	697b      	ldr	r3, [r7, #20]
    }
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b006      	add	sp, #24
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000278 	.word	0x20000278
 80041bc:	20000274 	.word	0x20000274

080041c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041c6:	e098      	b.n	80042fa <prvProcessReceivedCommands+0x13a>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041c8:	1d3b      	adds	r3, r7, #4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	da00      	bge.n	80041d2 <prvProcessReceivedCommands+0x12>
 80041d0:	e093      	b.n	80042fa <prvProcessReceivedCommands+0x13a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041d2:	1d3b      	adds	r3, r7, #4
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d004      	beq.n	80041ea <prvProcessReceivedCommands+0x2a>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	3304      	adds	r3, #4
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7fe fa7c 	bl	80026e2 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041ea:	003b      	movs	r3, r7
 80041ec:	0018      	movs	r0, r3
 80041ee:	f7ff ff85 	bl	80040fc <prvSampleTimeNow>
 80041f2:	0003      	movs	r3, r0
 80041f4:	613b      	str	r3, [r7, #16]

                switch( xMessage.xMessageID )
 80041f6:	1d3b      	adds	r3, r7, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b09      	cmp	r3, #9
 80041fc:	d900      	bls.n	8004200 <prvProcessReceivedCommands+0x40>
 80041fe:	e079      	b.n	80042f4 <prvProcessReceivedCommands+0x134>
 8004200:	009a      	lsls	r2, r3, #2
 8004202:	4b45      	ldr	r3, [pc, #276]	@ (8004318 <prvProcessReceivedCommands+0x158>)
 8004204:	18d3      	adds	r3, r2, r3
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	469f      	mov	pc, r3
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2228      	movs	r2, #40	@ 0x28
 800420e:	5c9b      	ldrb	r3, [r3, r2]
 8004210:	2201      	movs	r2, #1
 8004212:	4313      	orrs	r3, r2
 8004214:	b2d9      	uxtb	r1, r3
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	2228      	movs	r2, #40	@ 0x28
 800421a:	5499      	strb	r1, [r3, r2]

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	18d1      	adds	r1, r2, r3
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	6978      	ldr	r0, [r7, #20]
 800422e:	f7ff ff85 	bl	800413c <prvInsertTimerInActiveList>
 8004232:	1e03      	subs	r3, r0, #0
 8004234:	d060      	beq.n	80042f8 <prvProcessReceivedCommands+0x138>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	2228      	movs	r2, #40	@ 0x28
 800423a:	5c9b      	ldrb	r3, [r3, r2]
 800423c:	001a      	movs	r2, r3
 800423e:	2304      	movs	r3, #4
 8004240:	4013      	ands	r3, r2
 8004242:	d00a      	beq.n	800425a <prvProcessReceivedCommands+0x9a>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	18d1      	adds	r1, r2, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	0018      	movs	r0, r3
 8004254:	f7ff fe7e 	bl	8003f54 <prvReloadTimer>
 8004258:	e008      	b.n	800426c <prvProcessReceivedCommands+0xac>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2228      	movs	r2, #40	@ 0x28
 800425e:	5c9b      	ldrb	r3, [r3, r2]
 8004260:	2201      	movs	r2, #1
 8004262:	4393      	bics	r3, r2
 8004264:	b2d9      	uxtb	r1, r3
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2228      	movs	r2, #40	@ 0x28
 800426a:	5499      	strb	r1, [r3, r2]
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	0010      	movs	r0, r2
 8004274:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004276:	e03f      	b.n	80042f8 <prvProcessReceivedCommands+0x138>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2228      	movs	r2, #40	@ 0x28
 800427c:	5c9b      	ldrb	r3, [r3, r2]
 800427e:	2201      	movs	r2, #1
 8004280:	4393      	bics	r3, r2
 8004282:	b2d9      	uxtb	r1, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2228      	movs	r2, #40	@ 0x28
 8004288:	5499      	strb	r1, [r3, r2]
                        break;
 800428a:	e036      	b.n	80042fa <prvProcessReceivedCommands+0x13a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2228      	movs	r2, #40	@ 0x28
 8004290:	5c9b      	ldrb	r3, [r3, r2]
 8004292:	2201      	movs	r2, #1
 8004294:	4313      	orrs	r3, r2
 8004296:	b2d9      	uxtb	r1, r3
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2228      	movs	r2, #40	@ 0x28
 800429c:	5499      	strb	r1, [r3, r2]
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800429e:	1d3b      	adds	r3, r7, #4
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d102      	bne.n	80042b4 <prvProcessReceivedCommands+0xf4>
 80042ae:	b672      	cpsid	i
 80042b0:	46c0      	nop			@ (mov r8, r8)
 80042b2:	e7fd      	b.n	80042b0 <prvProcessReceivedCommands+0xf0>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	18d1      	adds	r1, r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	6978      	ldr	r0, [r7, #20]
 80042c2:	f7ff ff3b 	bl	800413c <prvInsertTimerInActiveList>
                        break;
 80042c6:	e018      	b.n	80042fa <prvProcessReceivedCommands+0x13a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2228      	movs	r2, #40	@ 0x28
 80042cc:	5c9b      	ldrb	r3, [r3, r2]
 80042ce:	001a      	movs	r2, r3
 80042d0:	2302      	movs	r3, #2
 80042d2:	4013      	ands	r3, r2
 80042d4:	d104      	bne.n	80042e0 <prvProcessReceivedCommands+0x120>
                            {
                                vPortFree( pxTimer );
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 fa5f 	bl	800479c <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042de:	e00c      	b.n	80042fa <prvProcessReceivedCommands+0x13a>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2228      	movs	r2, #40	@ 0x28
 80042e4:	5c9b      	ldrb	r3, [r3, r2]
 80042e6:	2201      	movs	r2, #1
 80042e8:	4393      	bics	r3, r2
 80042ea:	b2d9      	uxtb	r1, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2228      	movs	r2, #40	@ 0x28
 80042f0:	5499      	strb	r1, [r3, r2]
                        break;
 80042f2:	e002      	b.n	80042fa <prvProcessReceivedCommands+0x13a>

                    default:
                        /* Don't expect to get here. */
                        break;
 80042f4:	46c0      	nop			@ (mov r8, r8)
 80042f6:	e000      	b.n	80042fa <prvProcessReceivedCommands+0x13a>
                        break;
 80042f8:	46c0      	nop			@ (mov r8, r8)
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042fa:	4b08      	ldr	r3, [pc, #32]	@ (800431c <prvProcessReceivedCommands+0x15c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	1d39      	adds	r1, r7, #4
 8004300:	2200      	movs	r2, #0
 8004302:	0018      	movs	r0, r3
 8004304:	f7fe fbee 	bl	8002ae4 <xQueueReceive>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d000      	beq.n	800430e <prvProcessReceivedCommands+0x14e>
 800430c:	e75c      	b.n	80041c8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800430e:	46c0      	nop			@ (mov r8, r8)
 8004310:	46c0      	nop			@ (mov r8, r8)
 8004312:	46bd      	mov	sp, r7
 8004314:	b006      	add	sp, #24
 8004316:	bd80      	pop	{r7, pc}
 8004318:	08004a78 	.word	0x08004a78
 800431c:	2000027c 	.word	0x2000027c

08004320 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004326:	e00b      	b.n	8004340 <prvSwitchTimerLists+0x20>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004328:	4b0f      	ldr	r3, [pc, #60]	@ (8004368 <prvSwitchTimerLists+0x48>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004332:	2301      	movs	r3, #1
 8004334:	425a      	negs	r2, r3
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	0011      	movs	r1, r2
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff fe2c 	bl	8003f98 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004340:	4b09      	ldr	r3, [pc, #36]	@ (8004368 <prvSwitchTimerLists+0x48>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1ee      	bne.n	8004328 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800434a:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <prvSwitchTimerLists+0x48>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004350:	4b06      	ldr	r3, [pc, #24]	@ (800436c <prvSwitchTimerLists+0x4c>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <prvSwitchTimerLists+0x48>)
 8004356:	601a      	str	r2, [r3, #0]
        pxOverflowTimerList = pxTemp;
 8004358:	4b04      	ldr	r3, [pc, #16]	@ (800436c <prvSwitchTimerLists+0x4c>)
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	601a      	str	r2, [r3, #0]
    }
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	46bd      	mov	sp, r7
 8004362:	b002      	add	sp, #8
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			@ (mov r8, r8)
 8004368:	20000274 	.word	0x20000274
 800436c:	20000278 	.word	0x20000278

08004370 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004374:	f000 f8d4 	bl	8004520 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004378:	4b14      	ldr	r3, [pc, #80]	@ (80043cc <prvCheckForValidListAndQueue+0x5c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d120      	bne.n	80043c2 <prvCheckForValidListAndQueue+0x52>
            {
                vListInitialise( &xActiveTimerList1 );
 8004380:	4b13      	ldr	r3, [pc, #76]	@ (80043d0 <prvCheckForValidListAndQueue+0x60>)
 8004382:	0018      	movs	r0, r3
 8004384:	f7fe f94e 	bl	8002624 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004388:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <prvCheckForValidListAndQueue+0x64>)
 800438a:	0018      	movs	r0, r3
 800438c:	f7fe f94a 	bl	8002624 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004390:	4b11      	ldr	r3, [pc, #68]	@ (80043d8 <prvCheckForValidListAndQueue+0x68>)
 8004392:	4a0f      	ldr	r2, [pc, #60]	@ (80043d0 <prvCheckForValidListAndQueue+0x60>)
 8004394:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004396:	4b11      	ldr	r3, [pc, #68]	@ (80043dc <prvCheckForValidListAndQueue+0x6c>)
 8004398:	4a0e      	ldr	r2, [pc, #56]	@ (80043d4 <prvCheckForValidListAndQueue+0x64>)
 800439a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800439c:	2200      	movs	r2, #0
 800439e:	210c      	movs	r1, #12
 80043a0:	2005      	movs	r0, #5
 80043a2:	f7fe fa51 	bl	8002848 <xQueueGenericCreate>
 80043a6:	0002      	movs	r2, r0
 80043a8:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <prvCheckForValidListAndQueue+0x5c>)
 80043aa:	601a      	str	r2, [r3, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80043ac:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <prvCheckForValidListAndQueue+0x5c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d006      	beq.n	80043c2 <prvCheckForValidListAndQueue+0x52>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <prvCheckForValidListAndQueue+0x5c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a09      	ldr	r2, [pc, #36]	@ (80043e0 <prvCheckForValidListAndQueue+0x70>)
 80043ba:	0011      	movs	r1, r2
 80043bc:	0018      	movs	r0, r3
 80043be:	f7fe fd67 	bl	8002e90 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80043c2:	f000 f8bf 	bl	8004544 <vPortExitCritical>
    }
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	2000027c 	.word	0x2000027c
 80043d0:	2000024c 	.word	0x2000024c
 80043d4:	20000260 	.word	0x20000260
 80043d8:	20000274 	.word	0x20000274
 80043dc:	20000278 	.word	0x20000278
 80043e0:	08004a38 	.word	0x08004a38

080043e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3b04      	subs	r3, #4
 80043f4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2280      	movs	r2, #128	@ 0x80
 80043fa:	0452      	lsls	r2, r2, #17
 80043fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3b04      	subs	r3, #4
 8004402:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	3b04      	subs	r3, #4
 800440e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004410:	4a08      	ldr	r2, [pc, #32]	@ (8004434 <pxPortInitialiseStack+0x50>)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                       /* R12, R3, R2 and R1. */
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3b14      	subs	r3, #20
 800441a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                       /* R11..R4. */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b20      	subs	r3, #32
 8004426:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004428:	68fb      	ldr	r3, [r7, #12]
}
 800442a:	0018      	movs	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	b004      	add	sp, #16
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	08004439 	.word	0x08004439

08004438 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800443e:	2300      	movs	r3, #0
 8004440:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004442:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <prvTaskExitError+0x2c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	d002      	beq.n	8004450 <prvTaskExitError+0x18>
 800444a:	b672      	cpsid	i
 800444c:	46c0      	nop			@ (mov r8, r8)
 800444e:	e7fd      	b.n	800444c <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 8004450:	b672      	cpsid	i

    while( ulDummy == 0 )
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0fc      	beq.n	8004454 <prvTaskExitError+0x1c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800445a:	46c0      	nop			@ (mov r8, r8)
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}
 8004464:	20000010 	.word	0x20000010

08004468 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
    /* This function is no longer used, but retained for backward
     * compatibility. */
}
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004480 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
    /* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
     * table offset register that can be used to locate the initial stack value.
     * Not all M0 parts have the application vector table at address 0. */
    __asm volatile (
 8004480:	4a0b      	ldr	r2, [pc, #44]	@ (80044b0 <pxCurrentTCBConst2>)
 8004482:	6813      	ldr	r3, [r2, #0]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	3020      	adds	r0, #32
 8004488:	f380 8809 	msr	PSP, r0
 800448c:	2002      	movs	r0, #2
 800448e:	f380 8814 	msr	CONTROL, r0
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004498:	46ae      	mov	lr, r5
 800449a:	bc08      	pop	{r3}
 800449c:	bc04      	pop	{r2}
 800449e:	b662      	cpsie	i
 80044a0:	4718      	bx	r3
 80044a2:	46c0      	nop			@ (mov r8, r8)
 80044a4:	46c0      	nop			@ (mov r8, r8)
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	46c0      	nop			@ (mov r8, r8)
 80044aa:	46c0      	nop			@ (mov r8, r8)
 80044ac:	46c0      	nop			@ (mov r8, r8)
 80044ae:	46c0      	nop			@ (mov r8, r8)

080044b0 <pxCurrentTCBConst2>:
 80044b0:	20000148 	.word	0x20000148
        "	bx   r3						\n"/* Finally, jump to the user defined task code. */
        "								\n"
        "	.align 4					\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB	  "
        );
}
 80044b4:	46c0      	nop			@ (mov r8, r8)
 80044b6:	46c0      	nop			@ (mov r8, r8)

080044b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80044bc:	4b0e      	ldr	r3, [pc, #56]	@ (80044f8 <xPortStartScheduler+0x40>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b0d      	ldr	r3, [pc, #52]	@ (80044f8 <xPortStartScheduler+0x40>)
 80044c2:	21ff      	movs	r1, #255	@ 0xff
 80044c4:	0409      	lsls	r1, r1, #16
 80044c6:	430a      	orrs	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044ca:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <xPortStartScheduler+0x40>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	4b0a      	ldr	r3, [pc, #40]	@ (80044f8 <xPortStartScheduler+0x40>)
 80044d0:	21ff      	movs	r1, #255	@ 0xff
 80044d2:	0609      	lsls	r1, r1, #24
 80044d4:	430a      	orrs	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80044d8:	f000 f898 	bl	800460c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80044dc:	4b07      	ldr	r3, [pc, #28]	@ (80044fc <xPortStartScheduler+0x44>)
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vPortStartFirstTask();
 80044e2:	f7ff ffcd 	bl	8004480 <vPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80044e6:	f7ff f95d 	bl	80037a4 <vTaskSwitchContext>
    prvTaskExitError();
 80044ea:	f7ff ffa5 	bl	8004438 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	0018      	movs	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	e000ed20 	.word	0xe000ed20
 80044fc:	20000010 	.word	0x20000010

08004500 <vPortYield>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004504:	4b05      	ldr	r3, [pc, #20]	@ (800451c <vPortYield+0x1c>)
 8004506:	2280      	movs	r2, #128	@ 0x80
 8004508:	0552      	lsls	r2, r2, #21
 800450a:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is completely
     * within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800450c:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004510:	f3bf 8f6f 	isb	sy
}
 8004514:	46c0      	nop			@ (mov r8, r8)
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	46c0      	nop			@ (mov r8, r8)
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004524:	b672      	cpsid	i
    uxCriticalNesting++;
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <vPortEnterCritical+0x20>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	4b04      	ldr	r3, [pc, #16]	@ (8004540 <vPortEnterCritical+0x20>)
 800452e:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8004530:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004534:	f3bf 8f6f 	isb	sy
}
 8004538:	46c0      	nop			@ (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	20000010 	.word	0x20000010

08004544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004548:	4b09      	ldr	r3, [pc, #36]	@ (8004570 <vPortExitCritical+0x2c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d102      	bne.n	8004556 <vPortExitCritical+0x12>
 8004550:	b672      	cpsid	i
 8004552:	46c0      	nop			@ (mov r8, r8)
 8004554:	e7fd      	b.n	8004552 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <vPortExitCritical+0x2c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	1e5a      	subs	r2, r3, #1
 800455c:	4b04      	ldr	r3, [pc, #16]	@ (8004570 <vPortExitCritical+0x2c>)
 800455e:	601a      	str	r2, [r3, #0]

    if( uxCriticalNesting == 0 )
 8004560:	4b03      	ldr	r3, [pc, #12]	@ (8004570 <vPortExitCritical+0x2c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d100      	bne.n	800456a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8004568:	b662      	cpsie	i
    }
}
 800456a:	46c0      	nop			@ (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000010 	.word	0x20000010

08004574 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
    __asm volatile (
 8004574:	f3ef 8010 	mrs	r0, PRIMASK
 8004578:	b672      	cpsid	i
 800457a:	4770      	bx	lr
        " mrs r0, PRIMASK	\n"
        " cpsid i			\n"
        " bx lr				  "
        ::: "memory"
        );
}
 800457c:	46c0      	nop			@ (mov r8, r8)
 800457e:	0018      	movs	r0, r3

08004580 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
    __asm volatile (
 8004580:	f380 8810 	msr	PRIMASK, r0
 8004584:	4770      	bx	lr
        " msr PRIMASK, r0	\n"
        " bx lr				  "
        ::: "memory"
        );
}
 8004586:	46c0      	nop			@ (mov r8, r8)
	...

08004590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004590:	f3ef 8009 	mrs	r0, PSP
 8004594:	4b0e      	ldr	r3, [pc, #56]	@ (80045d0 <pxCurrentTCBConst>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	3820      	subs	r0, #32
 800459a:	6010      	str	r0, [r2, #0]
 800459c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800459e:	4644      	mov	r4, r8
 80045a0:	464d      	mov	r5, r9
 80045a2:	4656      	mov	r6, sl
 80045a4:	465f      	mov	r7, fp
 80045a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80045a8:	b508      	push	{r3, lr}
 80045aa:	b672      	cpsid	i
 80045ac:	f7ff f8fa 	bl	80037a4 <vTaskSwitchContext>
 80045b0:	b662      	cpsie	i
 80045b2:	bc0c      	pop	{r2, r3}
 80045b4:	6811      	ldr	r1, [r2, #0]
 80045b6:	6808      	ldr	r0, [r1, #0]
 80045b8:	3010      	adds	r0, #16
 80045ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80045bc:	46a0      	mov	r8, r4
 80045be:	46a9      	mov	r9, r5
 80045c0:	46b2      	mov	sl, r6
 80045c2:	46bb      	mov	fp, r7
 80045c4:	f380 8809 	msr	PSP, r0
 80045c8:	3820      	subs	r0, #32
 80045ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80045cc:	4718      	bx	r3
 80045ce:	46c0      	nop			@ (mov r8, r8)

080045d0 <pxCurrentTCBConst>:
 80045d0:	20000148 	.word	0x20000148
        "	bx r3								\n"
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	  "
    );
}
 80045d4:	46c0      	nop			@ (mov r8, r8)
 80045d6:	46c0      	nop			@ (mov r8, r8)

080045d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80045de:	f7ff ffc9 	bl	8004574 <ulSetInterruptMaskFromISR>
 80045e2:	0003      	movs	r3, r0
 80045e4:	607b      	str	r3, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80045e6:	f7fe ffd1 	bl	800358c <xTaskIncrementTick>
 80045ea:	1e03      	subs	r3, r0, #0
 80045ec:	d003      	beq.n	80045f6 <SysTick_Handler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045ee:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <SysTick_Handler+0x30>)
 80045f0:	2280      	movs	r2, #128	@ 0x80
 80045f2:	0552      	lsls	r2, r2, #21
 80045f4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7ff ffc1 	bl	8004580 <vClearInterruptMaskFromISR>
}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	46bd      	mov	sp, r7
 8004602:	b002      	add	sp, #8
 8004604:	bd80      	pop	{r7, pc}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	e000ed04 	.word	0xe000ed04

0800460c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004610:	4b07      	ldr	r3, [pc, #28]	@ (8004630 <vPortSetupTimerInterrupt+0x24>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004616:	4b07      	ldr	r3, [pc, #28]	@ (8004634 <vPortSetupTimerInterrupt+0x28>)
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800461c:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <vPortSetupTimerInterrupt+0x2c>)
 800461e:	4a07      	ldr	r2, [pc, #28]	@ (800463c <vPortSetupTimerInterrupt+0x30>)
 8004620:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004622:	4b03      	ldr	r3, [pc, #12]	@ (8004630 <vPortSetupTimerInterrupt+0x24>)
 8004624:	2207      	movs	r2, #7
 8004626:	601a      	str	r2, [r3, #0]
}
 8004628:	46c0      	nop			@ (mov r8, r8)
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	e000e010 	.word	0xe000e010
 8004634:	e000e018 	.word	0xe000e018
 8004638:	e000e014 	.word	0xe000e014
 800463c:	00001f3f 	.word	0x00001f3f

08004640 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800464c:	f7fe fe9a 	bl	8003384 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004650:	4b4d      	ldr	r3, [pc, #308]	@ (8004788 <pvPortMalloc+0x148>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004658:	f000 f8ee 	bl	8004838 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d012      	beq.n	8004688 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004662:	2208      	movs	r2, #8
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2107      	movs	r1, #7
 8004668:	400b      	ands	r3, r1
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	3308      	adds	r3, #8
 800466e:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	43db      	mvns	r3, r3
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	429a      	cmp	r2, r3
 8004678:	d804      	bhi.n	8004684 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	18d3      	adds	r3, r2, r3
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	e001      	b.n	8004688 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	db69      	blt.n	8004762 <pvPortMalloc+0x122>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d066      	beq.n	8004762 <pvPortMalloc+0x122>
 8004694:	4b3d      	ldr	r3, [pc, #244]	@ (800478c <pvPortMalloc+0x14c>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	429a      	cmp	r2, r3
 800469c:	d861      	bhi.n	8004762 <pvPortMalloc+0x122>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800469e:	4b3c      	ldr	r3, [pc, #240]	@ (8004790 <pvPortMalloc+0x150>)
 80046a0:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 80046a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004790 <pvPortMalloc+0x150>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046a8:	e004      	b.n	80046b4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d903      	bls.n	80046c6 <pvPortMalloc+0x86>
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f1      	bne.n	80046aa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046c6:	4b30      	ldr	r3, [pc, #192]	@ (8004788 <pvPortMalloc+0x148>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d048      	beq.n	8004762 <pvPortMalloc+0x122>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2208      	movs	r2, #8
 80046d6:	189b      	adds	r3, r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	1ad2      	subs	r2, r2, r3
 80046ea:	2308      	movs	r3, #8
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d917      	bls.n	8004722 <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	18d3      	adds	r3, r2, r3
 80046f8:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2207      	movs	r2, #7
 80046fe:	4013      	ands	r3, r2
 8004700:	d002      	beq.n	8004708 <pvPortMalloc+0xc8>
 8004702:	b672      	cpsid	i
 8004704:	46c0      	nop			@ (mov r8, r8)
 8004706:	e7fd      	b.n	8004704 <pvPortMalloc+0xc4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	1ad2      	subs	r2, r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	0018      	movs	r0, r3
 800471e:	f000 f8e5 	bl	80048ec <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004722:	4b1a      	ldr	r3, [pc, #104]	@ (800478c <pvPortMalloc+0x14c>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	1ad2      	subs	r2, r2, r3
 800472c:	4b17      	ldr	r3, [pc, #92]	@ (800478c <pvPortMalloc+0x14c>)
 800472e:	601a      	str	r2, [r3, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004730:	4b16      	ldr	r3, [pc, #88]	@ (800478c <pvPortMalloc+0x14c>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b17      	ldr	r3, [pc, #92]	@ (8004794 <pvPortMalloc+0x154>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d203      	bcs.n	8004744 <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800473c:	4b13      	ldr	r3, [pc, #76]	@ (800478c <pvPortMalloc+0x14c>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	4b14      	ldr	r3, [pc, #80]	@ (8004794 <pvPortMalloc+0x154>)
 8004742:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2280      	movs	r2, #128	@ 0x80
 800474a:	0612      	lsls	r2, r2, #24
 800474c:	431a      	orrs	r2, r3
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004758:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <pvPortMalloc+0x158>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	4b0e      	ldr	r3, [pc, #56]	@ (8004798 <pvPortMalloc+0x158>)
 8004760:	601a      	str	r2, [r3, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004762:	f7fe fe1b 	bl	800339c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <pvPortMalloc+0x130>
        {
            vApplicationMallocFailedHook();
 800476c:	f7fb ff2c 	bl	80005c8 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2207      	movs	r2, #7
 8004774:	4013      	ands	r3, r2
 8004776:	d002      	beq.n	800477e <pvPortMalloc+0x13e>
 8004778:	b672      	cpsid	i
 800477a:	46c0      	nop			@ (mov r8, r8)
 800477c:	e7fd      	b.n	800477a <pvPortMalloc+0x13a>
    return pvReturn;
 800477e:	697b      	ldr	r3, [r7, #20]
}
 8004780:	0018      	movs	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	b008      	add	sp, #32
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20001bf4 	.word	0x20001bf4
 800478c:	20001bf8 	.word	0x20001bf8
 8004790:	20001bec 	.word	0x20001bec
 8004794:	20001bfc 	.word	0x20001bfc
 8004798:	20001c00 	.word	0x20001c00

0800479c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d03b      	beq.n	8004826 <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047ae:	2308      	movs	r3, #8
 80047b0:	425b      	negs	r3, r3
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	18d3      	adds	r3, r2, r3
 80047b6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	db02      	blt.n	80047ca <vPortFree+0x2e>
 80047c4:	b672      	cpsid	i
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	e7fd      	b.n	80047c6 <vPortFree+0x2a>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <vPortFree+0x3c>
 80047d2:	b672      	cpsid	i
 80047d4:	46c0      	nop			@ (mov r8, r8)
 80047d6:	e7fd      	b.n	80047d4 <vPortFree+0x38>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0fdb      	lsrs	r3, r3, #31
 80047de:	1c1a      	adds	r2, r3, #0
 80047e0:	2301      	movs	r3, #1
 80047e2:	4013      	ands	r3, r2
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01d      	beq.n	8004826 <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d119      	bne.n	8004826 <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	005b      	lsls	r3, r3, #1
 80047f8:	085a      	lsrs	r2, r3, #1
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80047fe:	f7fe fdc1 	bl	8003384 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <vPortFree+0x94>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	18d2      	adds	r2, r2, r3
 800480c:	4b08      	ldr	r3, [pc, #32]	@ (8004830 <vPortFree+0x94>)
 800480e:	601a      	str	r2, [r3, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	0018      	movs	r0, r3
 8004814:	f000 f86a 	bl	80048ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004818:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <vPortFree+0x98>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <vPortFree+0x98>)
 8004820:	601a      	str	r2, [r3, #0]
                }
                ( void ) xTaskResumeAll();
 8004822:	f7fe fdbb 	bl	800339c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	b004      	add	sp, #16
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			@ (mov r8, r8)
 8004830:	20001bf8 	.word	0x20001bf8
 8004834:	20001c04 	.word	0x20001c04

08004838 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800483e:	4b25      	ldr	r3, [pc, #148]	@ (80048d4 <prvHeapInit+0x9c>)
 8004840:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004842:	4b25      	ldr	r3, [pc, #148]	@ (80048d8 <prvHeapInit+0xa0>)
 8004844:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2207      	movs	r2, #7
 800484a:	4013      	ands	r3, r2
 800484c:	d00c      	beq.n	8004868 <prvHeapInit+0x30>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	3307      	adds	r3, #7
 8004852:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2207      	movs	r2, #7
 8004858:	4393      	bics	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	1ad2      	subs	r2, r2, r3
 8004862:	4b1d      	ldr	r3, [pc, #116]	@ (80048d8 <prvHeapInit+0xa0>)
 8004864:	18d3      	adds	r3, r2, r3
 8004866:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800486c:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <prvHeapInit+0xa4>)
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	601a      	str	r2, [r3, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004872:	4b1a      	ldr	r3, [pc, #104]	@ (80048dc <prvHeapInit+0xa4>)
 8004874:	2200      	movs	r2, #0
 8004876:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	18d3      	adds	r3, r2, r3
 800487e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004880:	2208      	movs	r2, #8
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2207      	movs	r2, #7
 800488c:	4393      	bics	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4b13      	ldr	r3, [pc, #76]	@ (80048e0 <prvHeapInit+0xa8>)
 8004894:	601a      	str	r2, [r3, #0]
    pxEnd->xBlockSize = 0;
 8004896:	4b12      	ldr	r3, [pc, #72]	@ (80048e0 <prvHeapInit+0xa8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800489e:	4b10      	ldr	r3, [pc, #64]	@ (80048e0 <prvHeapInit+0xa8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048b4:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <prvHeapInit+0xa8>)
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4b08      	ldr	r3, [pc, #32]	@ (80048e4 <prvHeapInit+0xac>)
 80048c2:	601a      	str	r2, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	4b07      	ldr	r3, [pc, #28]	@ (80048e8 <prvHeapInit+0xb0>)
 80048ca:	601a      	str	r2, [r3, #0]
}
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b004      	add	sp, #16
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	00001964 	.word	0x00001964
 80048d8:	20000288 	.word	0x20000288
 80048dc:	20001bec 	.word	0x20001bec
 80048e0:	20001bf4 	.word	0x20001bf4
 80048e4:	20001bfc 	.word	0x20001bfc
 80048e8:	20001bf8 	.word	0x20001bf8

080048ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048f4:	4b27      	ldr	r3, [pc, #156]	@ (8004994 <prvInsertBlockIntoFreeList+0xa8>)
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e002      	b.n	8004900 <prvInsertBlockIntoFreeList+0x14>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d8f7      	bhi.n	80048fa <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	18d3      	adds	r3, r2, r3
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	d108      	bne.n	800492e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	18d2      	adds	r2, r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	18d2      	adds	r2, r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d118      	bne.n	8004974 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b14      	ldr	r3, [pc, #80]	@ (8004998 <prvInsertBlockIntoFreeList+0xac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d00d      	beq.n	800496a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	18d2      	adds	r2, r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	e008      	b.n	800497c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <prvInsertBlockIntoFreeList+0xac>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	e003      	b.n	800497c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	429a      	cmp	r2, r3
 8004982:	d002      	beq.n	800498a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	46bd      	mov	sp, r7
 800498e:	b004      	add	sp, #16
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	20001bec 	.word	0x20001bec
 8004998:	20001bf4 	.word	0x20001bf4

0800499c <memset>:
 800499c:	0003      	movs	r3, r0
 800499e:	1882      	adds	r2, r0, r2
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d100      	bne.n	80049a6 <memset+0xa>
 80049a4:	4770      	bx	lr
 80049a6:	7019      	strb	r1, [r3, #0]
 80049a8:	3301      	adds	r3, #1
 80049aa:	e7f9      	b.n	80049a0 <memset+0x4>

080049ac <__libc_init_array>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	2600      	movs	r6, #0
 80049b0:	4c0c      	ldr	r4, [pc, #48]	@ (80049e4 <__libc_init_array+0x38>)
 80049b2:	4d0d      	ldr	r5, [pc, #52]	@ (80049e8 <__libc_init_array+0x3c>)
 80049b4:	1b64      	subs	r4, r4, r5
 80049b6:	10a4      	asrs	r4, r4, #2
 80049b8:	42a6      	cmp	r6, r4
 80049ba:	d109      	bne.n	80049d0 <__libc_init_array+0x24>
 80049bc:	2600      	movs	r6, #0
 80049be:	f000 f823 	bl	8004a08 <_init>
 80049c2:	4c0a      	ldr	r4, [pc, #40]	@ (80049ec <__libc_init_array+0x40>)
 80049c4:	4d0a      	ldr	r5, [pc, #40]	@ (80049f0 <__libc_init_array+0x44>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	42a6      	cmp	r6, r4
 80049cc:	d105      	bne.n	80049da <__libc_init_array+0x2e>
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	00b3      	lsls	r3, r6, #2
 80049d2:	58eb      	ldr	r3, [r5, r3]
 80049d4:	4798      	blx	r3
 80049d6:	3601      	adds	r6, #1
 80049d8:	e7ee      	b.n	80049b8 <__libc_init_array+0xc>
 80049da:	00b3      	lsls	r3, r6, #2
 80049dc:	58eb      	ldr	r3, [r5, r3]
 80049de:	4798      	blx	r3
 80049e0:	3601      	adds	r6, #1
 80049e2:	e7f2      	b.n	80049ca <__libc_init_array+0x1e>
 80049e4:	08004aa0 	.word	0x08004aa0
 80049e8:	08004aa0 	.word	0x08004aa0
 80049ec:	08004aa4 	.word	0x08004aa4
 80049f0:	08004aa0 	.word	0x08004aa0

080049f4 <memcpy>:
 80049f4:	2300      	movs	r3, #0
 80049f6:	b510      	push	{r4, lr}
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d100      	bne.n	80049fe <memcpy+0xa>
 80049fc:	bd10      	pop	{r4, pc}
 80049fe:	5ccc      	ldrb	r4, [r1, r3]
 8004a00:	54c4      	strb	r4, [r0, r3]
 8004a02:	3301      	adds	r3, #1
 8004a04:	e7f8      	b.n	80049f8 <memcpy+0x4>
	...

08004a08 <_init>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr

08004a14 <_fini>:
 8004a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1a:	bc08      	pop	{r3}
 8004a1c:	469e      	mov	lr, r3
 8004a1e:	4770      	bx	lr
